<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PNNLOmics</name>
    </assembly>
    <members>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.MatrixUtilities.ReduceMatrix(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>
            Removes the row and column in which a 0 occurs along the diagonal of a square matrix.
            </summary>
            <param name="matrix">A square matrix, possibly with a 0 on the diagonal.</param>
            <returns>A square matrix with no 0's on the diagonal.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.MatrixUtilities.ReduceMatrix(MathNet.Numerics.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Remove the given row and column from a matrix.
            </summary>
            <param name="matrix">The matrix from with the row and column are to be removed.</param>
            <param name="rowColumnIndex">The index of the row and column which are to be removed.</param>
            <returns>A copy of matrix without the row and column given by rowColumnIndex.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.MatrixUtilities.RemoveRow(MathNet.Numerics.LinearAlgebra.Matrix,System.Int32)">
            <summary>
            Remove a single row from an [n x 1] matix.
            </summary>
            <param name="matrix">The original matrix.</param>
            <param name="rowIndex">The index of the row to be removed.</param>
            <returns>The matrix without the given row.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.MatrixUtilities.Differences``2(``0,``1,System.Boolean,System.Boolean)">
            <summary>
            Find the differences between any two features.
            </summary>
            <typeparam name="T">Feature or derived class.</typeparam>
            <typeparam name="U">Feature or derived class.</typeparam>
            <param name="feature1">Observed feature to be compared to other feature.</param>
            <param name="feature2">Feature (MassTag) to be compared to.</param>
            <param name="driftTime">true/false:  Whether or not to include the drift time difference.</param>
            <param name="forSTAC">true/false:  Whether or not the intended use is STAC.</param>
            <returns>An [n x 1] Matrix containing the differences between the two features.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.MatrixUtilities.Differences``1(``0,PNNLOmics.Data.MassTag,System.Boolean,System.Boolean)">
            <summary>
            Find the differences between a feature and a massTag.
            </summary>
            <typeparam name="T">Feature or derived class.</typeparam>
            <param name="feature">Observed feature to be compared to MassTag.</param>
            <param name="massTag">MassTag to be compared to.</param>
            <param name="driftTime">true/false:  Whether or not to include the drift time difference.</param>
            <param name="forSTAC">true/false:  Whether or not to separate predicted drift time.</param>
            <returns>An [n x 1] Matrix containing the differences between the two features.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.MatrixUtilities.Differences``2(``0,``1,System.Boolean)">
            <summary>
            Find the differences between any two features.
            </summary>
            <typeparam name="T">Feature or derived class.</typeparam>
            <typeparam name="U">Feature or derived class.</typeparam>
            <param name="feature1">Observed feature to be compared to other feature.</param>
            <param name="feature2">Feature (MassTag) to be compared to.</param>
            <param name="driftTime">true/false:  Whether or not to include the drift time difference.</param>
            <returns>An [n x 1] Matrix containing the differences between the two features.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.MatrixUtilities.Differences``2(``0,``1)">
            <summary>
            Find the differences between any two features.  Automatically detects the presence of drift time in the observed feature.
            </summary>
            <typeparam name="T">Feature or derived class.</typeparam>
            <typeparam name="U">Feature or derived class.</typeparam>
            <param name="feature1">Observed feature to be compared to other feature.</param>
            <param name="feature2">Feature (MassTag) to be compared to.</param>
            <returns>An [n x 1] Matrix containing the differences between the two features.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.SLiCInformation.#ctor">
            <summary>
            Default constructor for SLiCInformation class.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.SLiCInformation.Clear">
            <summary>
            Reset all SLiC parameters to default values.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.SLiCInformation.MassPPMStDev">
            <summary>
            Gets or sets the standard deviation of the mass errors in ppm.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.SLiCInformation.NETStDev">
            <summary>
            Gets or sets the standard deviation of the NET errors.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.SLiCInformation.DriftTimeStDev">
            <summary>
            Gets or sets the standard deviation of the drift time errors.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.DistanceFunction`1">
            <summary>
            Function for calculating the distance between two features.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:PNNLOmics.Algorithms.WithinTolerances`1">
            <summary>
            Delegate to determine if two features are within range of one another.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:PNNLOmics.Data.Features.FeatureLight">
            <summary>
            Basic feature class
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.FeatureLight.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.FeatureLight.#ctor(PNNLOmics.Data.Features.FeatureLight)">
            <summary>
            Copy constructor.
            </summary>
            <param name="feature">Feature to copy data from.</param>
        </member>
        <member name="M:PNNLOmics.Data.Features.FeatureLight.Clear">
            <summary>
            Resets the data structure back to its default state.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.FeatureLight.MassComparison">
            <summary>
            Compares the aligned monoisotopic mass of two Features
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.FeatureLight.MassAlignedComparison">
            <summary>
            Compares the aligned monoisotopic mass of two Features
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.FeatureLight.ToString">
            <summary>
            Returns a basic string representation of the cluster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Data.Features.FeatureLight.Equals(System.Object)">
            <summary>
            Compares two objects' values.
            </summary>
            <param name="obj">Other to compare with.</param>
            <returns>True if values are the same, false if not.</returns>
        </member>
        <member name="M:PNNLOmics.Data.Features.FeatureLight.GetHashCode">
            <summary>
            Generates a hash code.
            </summary>
            <returns>Hash code based on stored data.</returns>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureLight.Abundance">
            <summary>
            Gets or sets the abundance.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureLight.ID">
            <summary>
            Gets or sets the identification number of the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureLight.MassMonoisotopic">
            <summary>
            Gets or sets the monoisotopic mass of the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureLight.MassMonoisotopicAligned">
            <summary>
            Gets or sets the monoisotopic mass of the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureLight.RetentionTime">
            <summary>
            Gets or sets the retention time of a feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureLight.NET">
            <summary>
            Gets or sets the normalized retention time for this feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureLight.DriftTime">
            <summary>
            Gets or sets the drift time of a feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureLight.ChargeState">
            <summary>
            Gets or sets the charge state of a feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureLight.Score">
            <summary>
            Gets or sets the score value for this feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureLight.AmbiguityScore">
            <summary>
            Gets or sets the ambiguity score for a given cluster.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureLight.GroupID">
            <summary>
            Gets or sets the group id (e.g. dataset) this feature originated from.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.FormulaBuilder.FormulaBuilderBase.ConvertToMolecularFormula(System.String)">
            <summary>
            Overridden to provide a method for different types of formulas characteristic to a polymer
            </summary>
            <param name="inputSequence"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Data.FormulaBuilder.FormulaBuilderBase.FormulaToDictionary(System.String)">
            <summary>
            Converts a formula into a series of keyvaluepairs of element and count
            </summary>
            <param name="tempFormula"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Data.FormulaBuilder.FormulaBuilderBase.AddFormulaToPreviousFormula(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            Add further elements to the given dictionary
            </summary>
            <param name="formulaValuesToAdd"></param>
            <param name="previousDict"></param>
        </member>
        <member name="M:PNNLOmics.Data.FormulaBuilder.FormulaBuilderBase.RemoveFormulaFromPreviousFormula(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32}@)">
            <summary>
            Removes a chemical formula from a previous formula, in cases like hydrolysis leading to removal of an H2O
            </summary>
            <param name="formulaValuesToRemove">string of elements to remove from the formula</param>
            <param name="previousDict">The dictionary to be changed</param>
        </member>
        <member name="M:PNNLOmics.Data.FormulaBuilder.OligosaccharideFormulaBuilder.ConvertToMolecularFormula(System.String)">
            <summary>
            Converts an glycan code into a molecular formula (Hex, HexNAc, Fuc, NeuAc, Na-H). Adducts are added later
            If you need more monosacharides, add on the the end of the glycan code (X,X,X,X,X) and update the swtch
            </summary>
            <param name="inputCode"></param>
            <returns></returns>
        </member>
        <member name="T:PNNLOmics.Data.Constants.MiscellaneousMatterName">
            <summary>
            Miscellaneous Matter
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.AminoAcidName">
            <summary>
            Amino Acids
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctionBase">
            <summary>
            interface for strategy design pattern
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctionBase.Evaluate(System.Double[],System.Double)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="cofficients"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctionBase.Evaluate(System.Double[],System.Double[])">
            <summary>
            Evaluates the function.
            </summary>
            <param name="coefficients"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctionBase.FunctionDelegate(System.Double[],System.Double[],System.Double@,System.Object)">
            <summary>
            Delegate definition for the LM solver.
            </summary>
            <param name="c"></param>
            <param name="x"></param>
            <param name="functionResult"></param>
            <param name="obj"></param>
        </member>
        <member name="P:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctionBase.Coefficients">
            <summary>
            Coefficients found via solving.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.PeakDetection.PeakThresholderParameters">
            <summary>
            paramaters used for calculating a threshold
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.PeakDetection.PeakThresholderParameters.#ctor">
            <summary>
            default constructor that sets default threshold parameters
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.PeakDetection.PeakThresholderParameters.Clear">
            <summary>
            initializes the default values 
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.PeakDetection.PeakThresholderParameters.isDataThresholded">
            <summary>
            Gets or sets a bool asking if we have applied a thresholding algorithm to the data
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.PeakDetection.PeakThresholderParameters.SignalToShoulderCuttoff">
            <summary>
            Gets or sets the ratio of highest piont at the peak apex to the lowet peak valley.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.PeakDetection.PeakThresholderParameters.ThresholdMethod">
            <summary>
            Gets or sets a method for how a threshold line is chosen.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.PeakDetection.PeakThresholderParameters.DataNoiseType">
            <summary>
            Gets and sets the noise quality of the data.  Has the noise been removed yet.  Orbitrap data has the noise removed.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.PeakDetection.FullWidthHalfMaximumPeakOptions">
            <summary>
            Sets the options for finding the FWHM of the data.  Unassigned is the default
            Interpolated occures when there is enough data to interpolate betwen 2 detected data points.  this works well for resolved peaks
            Linear Extrapolation.  When there are not enough data points N=2, project a linear line to get the FWHM
            Quadratic Extrapolation.  When ther are more than 2 points on a side we can fit a curve.  The curve is fit to the full peak, not just the side to prevent convex curves
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.PeakDetection.FullWidthHalfMaximumPeakOptions.Unassigned">
            <summary>
            no method is set for finding data points at half maximum.  This is used as a default setting.
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.PeakDetection.FullWidthHalfMaximumPeakOptions.Interpolated">
            <summary>
            there are enough data points that we can interpolate between them
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.PeakDetection.FullWidthHalfMaximumPeakOptions.LinearExtrapolation">
            <summary>
            we are missing points around the half maximum but we have 2 higher intensity points we can use for extrapolating
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.PeakDetection.FullWidthHalfMaximumPeakOptions.QuadraticExtrapolation">
            <summary>
            we are missing points around the half maximum but we have more than 2 higher intensity points we can use for extrapolating
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.FeatureClustering.UMCCentroidClusterer`2">
            <summary>
            Links objects using a centroid distance linkage algorithm.
            </summary>
            <typeparam name="T">Object to link</typeparam>
            <typeparam name="U">Cluster to produce.</typeparam>
        </member>
        <member name="T:PNNLOmics.Algorithms.FeatureClustering.LinkageClustererBase`2">
            <summary>
            Performs the base linkage types.
            </summary>
            <typeparam name="T">Features to cluster.</typeparam>
            <typeparam name="T">Clusters produced.</typeparam>
        </member>
        <member name="T:PNNLOmics.Algorithms.FeatureClustering.IClusterer`2">
            <summary>
            Interface describing how to cluster 
            </summary>
            <typeparam name="T">Type to cluster data objects of.</typeparam>
            <typeparam name="U">Type of cluster output objects.</typeparam>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.IClusterer`2.Cluster(System.Collections.Generic.List{`0},System.Collections.Generic.List{`1})">
            <summary>
            Clusters the data objects provided in the list.
            </summary>
            <param name="data">Data to cluster.</param>                
        </member>
        <member name="F:PNNLOmics.Algorithms.FeatureClustering.LinkageClustererBase`2.m_maxDistance">
            <summary>
            Maximum distance when calculating ambiguity
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.LinkageClustererBase`2.Cluster(System.Collections.Generic.List{`0})">
            <summary>
            Clusters the UMC data and returns a list of valid UMC Clusters.
            </summary>
            <param name="data">Data to cluster.</param>
            <returns>List of UMC clusters.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.LinkageClustererBase`2.CreateSingletonClusters(System.Collections.Generic.List{`0},System.Int32,System.Int32)">
            <summary>
            Creates a list of singleton clusters from the UMC data between start and stop.
            </summary>
            <param name="data">Data to create singleton's from.</param>
            <param name="start">Start UMC index.</param>
            <param name="stop">Stop UMC Index.</param>
            <returns>List of singleton clusters.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.LinkageClustererBase`2.CalculateMinimumFeatureDistance(`1,`1)">
            <summary>
            Calculates the minimum distance between two clusters by pairwise feature comparisons.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.LinkageClustererBase`2.CalculateAmbiguityScore(System.Collections.Generic.List{`1})">
            <summary>
            Calculates the ambiguity score
            </summary>
            <param name="clusters"></param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.LinkageClustererBase`2.CalculatePairWiseDistances(System.Int32,System.Int32,System.Collections.Generic.List{`0})">
            <summary>
            Calculates pairwise distances between features in the list of 
            potential features to cluster.        
            </summary>
            <param name="start">Start UMC index.</param>
            <param name="stop">Stop UMC index.</param>
            <param name="data">List of data to compute distances over.</param>
            <returns>List of UMC distances to consider during clustering.</returns>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.LinkageClustererBase`2.SeedClusterID">
            <summary>
            Gets or sets the initial cluster Id to use when assingning ID's to a cluster.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.LinkageClustererBase`2.Parameters">
            <summary>
            Gets or sets the parameters used 
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.FeatureClustering.UMCCentroidClusterer`2.m_massComparer">
            <summary>
            Compares the masses of two light features.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.UMCCentroidClusterer`2.#ctor">
            <summary>
            Default Constructor.  This sets the parameters and tolerances to their default values.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.UMCCentroidClusterer`2.CalculateDistances(System.Collections.Generic.Dictionary{System.Int32,`1})">
            <summary>
            Calculates pairwise distances between features in the list of 
            potential features to cluster.        
            </summary>
            <param name="start">Start UMC index.</param>
            <param name="stop">Stop UMC index.</param>
            <param name="data">List of data to compute distances over.</param>
            <returns>List of UMC distances to consider during clustering.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.UMCCentroidClusterer`2.Cluster(System.Collections.Generic.List{`0},System.Collections.Generic.List{`1})">
            <summary>
            Clusters UMC's into UMC Clusters using Average Linkage Clustering.
            </summary>
            <param name="data">List of data to cluster.</param>
            <returns>List of clustered data.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.UMCCentroidClusterer`2.Cluster(System.Collections.Generic.Dictionary{System.Int32,`1})">
            <summary>
            Performs average linkage clustering over the data and returns a list of UMC clusters.
            </summary>
            <param name="clusters">Singleton clusters</param>		
            <returns>List of T clusters.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.UMCCentroidClusterer`2.AreClustersWithinTolerance(`1,`1)">
            <summary>
            Determines if two clusters are within mass, NET, and drift time tolerances
            </summary>
            <param name="clusterX">One of the two clusters to test</param>
            <param name="clusterY">One of the two clusters to test</param>
            <returns>True if clusters are within tolerance, false otherwise</returns>
        </member>
        <member name="T:PNNLOmics.Algorithms.Alignment.AlignmentDataset`1">
            <summary>
            Holds a structured form of the features to be aligned or aligned against.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.AlignmentDataset`1.#ctor(System.Collections.Generic.ICollection{`0},System.Int32)">
            <summary>
            
            </summary>
            <param name="dataset"></param>
            <param name="numberOfSections"></param>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.AlignmentDataset`1.GetEnumerator">
            <summary>
            This function allows AlignmentDataset to be used within a "foreach" loop
            </summary>
            <returns>The next Feature</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.AlignmentDataset`1.FeatureIndicesForSection(System.Int32)">
            <summary>
            Gets the indices of the Features for the specified section
            </summary>
            <param name="section">The section to get</param>
            <returns>A list of int's representing the indices of the Features
            belonging to the requested section from the dataset. Returns null if
            the section is out of bounds</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.AlignmentDataset`1.DivideDatasetIntoSections">
            <summary>
            Populates the internal list of sections with indices of Features from
            the dataset for which section they belong to
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentDataset`1.Item(System.Int32)">
            <summary>
            Gets the Feature from the dataset at the specified index
            </summary>
            <param name="index">Index of Feature to get</param>
            <returns>The Feature at the specified index</returns>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentDataset`1.Count">
            <summary>
            Gets the number of Features stored in this AlignmentDataset
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentDataset`1.NumberOfSections">
            <summary>
            Gets or sets the number of sections this dataset is broken into
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentDataset`1.SectionWidth">
            <summary>
            Gets the width that each section of this dataset is broken into
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentDataset`1.EarliestElutionTime">
            <summary>
            Gets the earliest elution time that appears in the dataset
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentDataset`1.LatestElutionTime">
            <summary>
            Gets the latest elution time that appears in the dataset
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Peak">
            <summary>
            Represents a peak.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Peak.#ctor">
            <summary>
            Default constructor. 
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Peak.Clear">
            <summary>
            Sets the values of the peak to its default value.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Peak.Height">
            <summary>
            Gets or the height of the peak.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Peak.XValue">
            <summary>
            Gets or sets the X-Value of the peak (e.g. time, scan, m/z)
            </summary>        
        </member>
        <member name="P:PNNLOmics.Data.Peak.Width">
            <summary>
            Gets or sets the width of a peak.  
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Peak.Points">
            <summary>
            Gets or sets the data that define the peak or profile.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Peak.LeftWidth">
            <summary>
            Gets or sets the width to the left of the centroid (XValue) at half max.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Peak.RightWidth">
            <summary>
            Gets or sets the width to the right of the centroid (XValue) at half max.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Peak.LocalSignalToNoise">
            <summary>
            Gets or sets local signal to noise ratio.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Peak.Background">
            <summary>
            Gets or sets the background at a peak's x-value.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherTolerances.#ctor">
            <summary>
            Parameterless constructor for FeatureMatcherTolerances class.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherTolerances.#ctor(System.Double,System.Double,System.Single)">
            <summary>
            Constructor for FeatureMatcherTolerances class taking in all necessary variables.
            </summary>
            <param name="massTolerancePPM">Mass tolerance in ppm.</param>
            <param name="netTolerance">NET tolerance.</param>
            <param name="driftTimeTolerance">Drift time tolerance.</param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherTolerances.Clear">
            <summary>
            Resets all tolerances to default values.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherTolerances.AsVector(System.Boolean)">
            <summary>
            Gets tolerances as a vector.
            </summary>
            <param name="driftTime">Whether to include the drift time tolerance.</param>
            <returns>A matrix of dimention 2x1 if driftTime=false (3x1 if driftTime=true), containing the tolerances.</returns>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherTolerances.Refined">
            <summary>
            Gets or sets whether the tolerances have been refined.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherTolerances.MassTolerancePPM">
            <summary>
            Gets or sets the mass tolerance in ppm.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherTolerances.NETTolerance">
            <summary>
            Gets or sets the NET tolerance.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherTolerances.DriftTimeTolerance">
            <summary>
            Gets or sets the drift time tolerance.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.PrecursorInfo.MSLevel">
            <summary>
            MS=0 or MSMS=1
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.PrecursorInfo.PrecursorCharge">
            <summary>
            Charge of the precursor Ion
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.PrecursorInfo.PrecursorScan">
            <summary>
            PrecursorScanNumber
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.PrecursorInfo.PrecursorMZ">
            <summary>
            Precursor m/z
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.PrecursorInfo.PrecursorIntensity">
            <summary>
            Precursor intensity
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Features.ClusterCentroidRepresentation">
            <summary>
            Enumerates the cluster centroid is calculated.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.Libraries.MiscellaneousMatterLibrary">
            <summary>
            Sets up the miscellaneous matter compound library and calculates its monoisotopic masses from its elemental composition
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.Libraries.MatterLibrary`2">
            <summary>
            This abstract class is used for accessing the mapping dictionaries that connect the enums and the data
            </summary>
            <typeparam name="T">Matter Type Type</typeparam>
            <typeparam name="U">Enumeration Type</typeparam>    
        </member>
        <member name="F:PNNLOmics.Data.Constants.Libraries.MatterLibrary`2.m_symbolToCompoundMap">
            <summary>
            Maps the symbols to Matter objects.  
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Constants.Libraries.MatterLibrary`2.m_enumToSymbolMap">
            <summary>
            Maps the Matter enumerations to the symbols 
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Constants.Libraries.MatterLibrary`2.LoadLibrary">
            <summary>
            This abstract generic Dictionary Loads the data from a given Matter type T 
            </summary>
            <returns>Matter library</returns>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Libraries.MatterLibrary`2.Item(System.String)">
            <summary>
            This generic converts the string key into an Matter type T via the symbolToCompoundMap
            </summary>
            <param name="key">string key</param>
            <returns>Matter object</returns>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Libraries.MatterLibrary`2.Item(`1)">
            <summary>
            This generic converts the generic enum key into an Matter type T via the symbolToCompoundMap
            </summary>
            <param name="key">Matter enumation</param>
            <returns>Matter object</returns>
        </member>
        <member name="M:PNNLOmics.Data.Constants.Libraries.MiscellaneousMatterLibrary.LoadLibrary">
            <summary>
            This is a Class designed to create other molecules from the elements.
            The other molecules are added to a Dictionary searchable by char keys such as "Aldehyde" for Aldehyde group
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.ElementName">
            <summary>
            Elements, updated spellings 10-8-10
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Solvers.TrapezoidIntegration">
            <summary>
            Class for using the trapezoid rule to integrate a basis function.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Solvers.NumericalIntegrationBase">
            <summary>
            Integration technique
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.NumericalIntegrationBase.Integrate(PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctionBase,System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            Integratesa function based on the start and stop points, and the total number of samples to take.
            </summary>
            <param name="basis">Function to evaluate</param>
            <param name="coefficients">Coefficients of a fit function</param>
            <param name="start">Start of the function to evaluate</param>
            <param name="stop">Stop of the function to evaluate</param>
            <param name="numberOfSamples">Total number of samples to take</param>
            <returns>Normalized area between start and stop of the basis function</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.TrapezoidIntegration.Integrate(PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctionBase,System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            Numerical integration of a basis function.
            </summary>
            <param name="basis">Function to evaluate</param>
            <param name="coefficients">Coefficients of a fit function</param>
            <param name="start">Start of the function to evaluate</param>
            <param name="stop">Stop of the function to evaluate</param>
            <param name="numberOfSamples">Total number of samples to take</param>
            <returns>Normalized area between start and stop of the basis function</returns>
        </member>
        <member name="T:PNNLOmics.Algorithms.Solvers.ChebyshevSolver">
            <summary>
            Basis function for the LM Algorithm using First Order Chebyshev
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.ChebyshevSolver.SecondOrderSolve(System.Double[],System.Double[],System.Double@,System.Object)">
            <summary>
            Evalutates the second order chebyshev polynomials
            </summary>
            <param name="c">Set of coefficients</param>
            <param name="x">Input variables</param>
            <param name="func">Returned sum value of your function</param>
            <param name="obj">?</param>
        </member>
        <member name="T:PNNLOmics.Algorithms.Solvers.QuadraticSolver">
            <summary>
            Basis Function for the LM Algorithm using a parabola
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Solvers.GaussianSolver">
            <summary>
            Basis Function for the LM Algorithm using a Gaussian
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Solvers.LorentzianSolver">
            <summary>
            Basis Function for the LM Algorithm using a Lorentzian or Cauchy
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctions.Lorentian">
            <summary>
            Basis function for the LM Algorithm using Lorentzian Peak Shapes
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctions.Lorentian.FunctionDelegate(System.Double[],System.Double[],System.Double@,System.Object)">
            <summary>
            Evalutates the second order chebyshev polynomials
            </summary>
            <param name="c">Set of coefficients</param>
            <param name="x">Input variables</param>
            <param name="functionResult">Returned sum value of your function</param>
            <param name="obj">?</param>
        </member>
        <member name="T:PNNLOmics.Algorithms.PeakDetection.PeakThresholder">
            <summary>
            Calculates a global threshold line to filter the data
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.PeakDetection.PeakThresholder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.PeakDetection.PeakThresholder.ApplyThreshold(System.Collections.Generic.List{PNNLOmics.Data.ProcessedPeak})">
            <summary>
            calculate mean of the noise (aka mean of the data) then calculate the standard deviation of the noise (aks data)
            if peak is above Xsigma+mean reject
            FWHM thresholding is not proving to be usefull yet.
            </summary>
            <param name="peakData">input peaks we want to threshold</param>
            <param name="peakShoulderNoise">lowest minima point intensity surrounding the peak</param>
            <param name="localMinimaData">index of minima on each side of point X=left, Y=right</param>
            <param name="parameters">Peakthreshold parameters</param>
        </member>
        <member name="P:PNNLOmics.Algorithms.PeakDetection.PeakThresholder.Parameters">
            <summary>
            Gets or sets the peak centroider parameters.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.PeakDetection.PeakCentroiderParameters">
            <summary>
            Parameters used for calculating the centroid mass and apex intensity of a peak
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.PeakDetection.PeakCentroiderParameters.#ctor">
            <summary>
            default constructor that loads default values
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.PeakDetection.PeakCentroiderParameters.Clear">
            <summary>
            initializes the parameters to their defaults.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.PeakDetection.PeakCentroiderParameters.IsXYDataCentroided">
            <summary>
            Gets or sets a bool that asks if the data already been centroided before, such as a stick plot.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.PeakDetection.PeakCentroiderParameters.NumberOfPoints">
            <summary>
            Gets or sets how many points at the top of the peak should we fit to.  3 is the most robust.  others will fail if there are shoulders etc.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.PeakDetection.PeakCentroiderParameters.DefaultShoulderNoiseValue">
            <summary>
            Gets or sets a value to be used if the local minimum goes to 0 on both sides of the peak.  If this happens, return this value so signal/noise = signal
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.PeakDetection.PeakCentroiderParameters.FWHMPeakFitType">
            <summary>
            Gets or sets a peak top fit type.  Parabolic or Lorentzian.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.PeakDetection.PeakCentroiderParameters.DefaultFWHMForCentroidedData">
            <summary>
            Gets or sets a magic number FWHM when none is present.  Since the data can be loaded as sticks-to-zero data we need to add a width so the deisotoping algorithms will work
            </summary>
        </member>
        <member name="T:PNNLOmics.Processor`3">
            <summary>
            Processes data of type T, U, V
            </summary>
            <typeparam name="T">Data Type</typeparam>
            <typeparam name="U">Return Type</typeparam>
            <typeparam name="V">Options Type</typeparam>
        </member>
        <member name="T:PNNLOmics.Data.Constants.Matter">
            <summary>
            This is an abstract Class designed to cover the most basic parameters of matter objects.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Matter.Name">
            <summary>
            name of the matter
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Matter.MassMonoIsotopic">
            <summary>
            moniosopic mass of the matter
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Matter.Symbol">
            <summary>
            short hand symbol for the matter
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Features.IChildFeature`1">
            <summary>
            An object that realizes this interface can be part of another object's aggregation.
            </summary>
            <typeparam name="T">Parent Type</typeparam>
        </member>
        <member name="M:PNNLOmics.Data.Features.IChildFeature`1.SetParentFeature(`0)">
            <summary>
            Sets the parent feature of the object.
            </summary>
            <param name="parentFeature">Parent feature to reference.</param>
        </member>
        <member name="P:PNNLOmics.Data.Features.IChildFeature`1.ParentFeature">
            <summary>
            Gets the parent feature for this object.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctions.Cubic">
            <summary>
            Basis function for the LM Algorithm using Polynomials
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctions.Cubic.FunctionDelegate(System.Double[],System.Double[],System.Double@,System.Object)">
            <summary>
            Evaluates the cubic polynomials
            </summary>
            <param name="c">Set of coefficients</param>
            <param name="x">Input variables</param>
            <param name="functionResult">Returned sum value of your function</param>
            <param name="obj">?</param>
        </member>
        <member name="T:PNNLOmics.Algorithms.FeatureMatcher.PeakMatcher`2">
            <summary>
            Matches features to a list of mass tags.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.PeakMatcher`2.MatchFeatures(System.Collections.Generic.List{`0},System.Collections.Generic.List{`1},PNNLOmics.Algorithms.FeatureMatcher.PeakMatcherOptions)">
            <summary>
            Matches a list of features to a list of mass tags.
            </summary>
            <param name="features"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="T:PNNLOmics.Data.Features.Feature">
            <summary>
            Abstract base class that represents the most basic properties of any Feature.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.Feature.CONST_DEFAULT_SCAN_VALUE">
            <summary>
            Default value for any scan.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.Feature.#ctor(PNNLOmics.Data.Features.Feature)">
            <summary>
            Copy constructor.
            </summary>
            <param name="feature">Feature to copy data from.</param>
        </member>
        <member name="M:PNNLOmics.Data.Features.Feature.Clear">
            <summary>
            Clears the datatype and resets the raw values to their default values.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.Feature.CompareTo(PNNLOmics.Data.Features.Feature)">
            <summary>
            Default Comparer used for the Feature class. Sorts by Monoisotopic Mass.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.Feature.MassComparison">
            <summary>
            Compares the monoisotopic mass of two Features
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.Feature.MassAlignedComparison">
            <summary>
            Compares the aligned monoisotopic mass of two Features
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.Feature.ScanLCComparison">
            <summary>
            Compares the scan of two Features
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.Feature.ScanAlignedComparison">
            <summary>
            Compares the aligned scan of two Features
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.Feature.NETComparison">
            <summary>
            Compares the NET of two Features
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.Feature.NETAlignedComparison">
            <summary>
            Compares the NET aligned of two Features
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.Feature.MZComparison">
            <summary>
            Compares the mass to charge ratio (m/z) of two Features
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.Feature.IDComparison">
            <summary>
            Compares the ID values of two Features
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.Feature.DriftTimeComparison">
            <summary>
            Compares the drift time of two Features
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.Feature.ChargeStateComparison">
            <summary>
            Compares the charge state of two Features
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.Feature.AbundanceComparison">
            <summary>
            Compares the abundance of two Features
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.Feature.ScanLCAndMassComparison">
            <summary>
            Compares the LC Scan and then the Monoisotopic Mass of two Features
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.Feature.ScanLCAndChargeStateComparison">
            <summary>
            Compares the LC Scan and then the Charge State of two Features
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.Feature.ScanLCAndDriftTimeAndMassComparison">
            <summary>
            Compares the LC Scan and then the Monoisotopic Mass of two Features
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.Feature.ComputeMassPPMDifference(System.Double,System.Double)">
            <summary>
            Computes the mass difference in parts per million (ppm) for two given masses.
            </summary>
            <param name="massX">Mass of feature X.</param>
            <param name="massY">Mass of feature Y.</param>
            <returns>Mass difference in parts per million (ppm).</returns>
        </member>
        <member name="M:PNNLOmics.Data.Features.Feature.ComputeDaDifferenceFromPPM(System.Double,System.Double)">
            <summary>
            Computes the mass difference in parts per million (ppm) for two given masses.
            </summary>
            <param name="massX">Mass of feature X.</param>
            <param name="massY">Mass of feature Y.</param>
            <returns>Mass difference in parts per million (ppm).</returns>
        </member>
        <member name="M:PNNLOmics.Data.Features.Feature.ToString">
            <summary>
            Returns a basic string representation of the cluster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Data.Features.Feature.Equals(System.Object)">
            <summary>
            Compares two objects' values.
            </summary>
            <param name="obj">Other to compare with.</param>
            <returns>True if values are the same, false if not.</returns>
        </member>
        <member name="M:PNNLOmics.Data.Features.Feature.GetHashCode">
            <summary>
            Generates a hash code.
            </summary>
            <returns>Hash code based on stored data.</returns>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.ID">
            <summary>
            The ID for a feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.Index">
            <summary>
            The index of this feature. Usually used for keeping multiple sets of IDs.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.IsSuspicious">
            <summary>
            True if the MSFeature was marked as Suspicious by Deconvolution algorithm.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.IsDaltonCorrected">
            <summary>
            True if the MSFeature was marked corrected by the Da Correction algorithm.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.DriftTime">
            <summary>
            The drift time of the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.DriftTimeAligned">
            <summary>
            The aligned Drift Time of the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.ElutionTime">
            <summary>
            The elution time of the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.MassMonoisotopic">
            <summary>
            The monoisotopic mass of the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.MassMonoisotopicAligned">
            <summary>
            The aligned monoisotopic mass of the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.NET">
            <summary>
            The normalized elution time (NET) of the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.NETAligned">
            <summary>
            The aligned NET of the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.ScanLC">
            <summary>
            The LC scan of the feature from the raw data.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.ScanLCAligned">
            <summary>
            The aligned LC scan of the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.Abundance">
            <summary>
            The abundance of the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.MZ">
            <summary>
            The M/Z value of the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.MZCorrected">
            <summary>
            The Da corrected M/Z value of the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.Feature.ChargeState">
            <summary>
            The charge state of the feature.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.FeatureTolerances">
            <summary>
            Tolerances for the single linkage clustering algorithm.
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.FeatureTolerances.DEFAULT_DRIFT_TIME">
            <summary>
            Default drift time value in ms.
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.FeatureTolerances.DEFAULT_RETENTION_TIME">
            <summary>
            Default normalized elution time (NET) value as % of total experiment.
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.FeatureTolerances.DEFAULT_MASS">
            <summary>
            Default mass value in parts per million (ppm).
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureTolerances.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureTolerances.Clear">
            <summary>
            Resets the tolerances to their default values.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureTolerances.DriftTime">
            <summary>
            Gets or sets the drift time tolerance.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureTolerances.Mass">
            <summary>
            Gets or sets the mass tolerance.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureTolerances.RetentionTime">
            <summary>
            Gets or sets the normalized elution time (NET) tolerance.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.ScanMetaData">
            <summary>
            Class that encapsulates the data from an instrument vendors file.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ScanMetaData.Data">
            <summary>
            Gets or sets the value of the data.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.PeakProcessingLevel">
            <summary>
            Type of Peak Processing applied to the corresponding peak list.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.MassTags.FeatureMatchLight`2">
            <summary>
            Holds matches between a feature and a mass tag.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PNNLOmics.Data.MassTags.FeatureMatchLight`2.Confidence">
            <summary>
            Gets or sets the confidence of this match. STAC Score.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MassTags.FeatureMatchLight`2.Uniqueness">
            <summary>
            Gets or sets the uniqueness of this match.  STAC Up
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.ISpectraProvider">
            <summary>
            Interface for objects that have access to raw data.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.ISpectraProvider.GetRawSpectra(System.Int32,System.Int32)">
            <summary>
            Retrieves the scan from the underlying stream.
            </summary>
            <param name="scan"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Data.ISpectraProvider.GetRawSpectra(System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieves the scan from the underlying stream of MSn type n = scanLevel
            </summary>
            <param name="scan"></param>
            <param name="group"></param>
            <param name="scanLevel">MS Level of the scan</param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Data.ISpectraProvider.GetMSMSSpectra(System.Int32)">
            <summary>
            Retrieves a list of MS/MS spectra from the given group.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Data.ISpectraProvider.GetMSMSSpectra(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Get a list of MS/MS spectra, but exclude if it exists in the dictionary of provided scans.
            </summary>
            <param name="group"></param>
            <param name="excludeMap"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Data.ISpectraProvider.AddDataFile(System.String,System.Int32)">
            <summary>
            Adds a file ID to the path for multi-file support.
            </summary>
            <param name="path"></param>
            <param name="groupID"></param>
        </member>
        <member name="T:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctions.Linear">
            <summary>
            Basis function for adding a fit to a linear function.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctions.Linear.FunctionDelegate(System.Double[],System.Double[],System.Double@,System.Object)">
            <summary>
            Evalutates a linear point value.
            </summary>
            <param name="c">Set of coefficients</param>
            <param name="x">Input variables</param>
            <param name="functionResult">Returned sum value of your function</param>
            <param name="obj">?</param>
        </member>
        <member name="T:PNNLOmics.Algorithms.PeakDetection.KronewitterPeakDetector">
            <summary>
            
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.PeakDetection.PeakDetector">
            <summary>
            Abstract base class that defines a way to take XY data and return a list of peaks.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.PeakDetection.PeakDetector.DetectPeaks(System.Collections.ObjectModel.Collection{PNNLOmics.Data.XYData})">
            <summary>
            Processes a list of XYdata and returns a set of peaks.
            </summary>
            <param name="rawXYData">List of XY data.</param>
            <returns>List of peaks.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.PeakDetection.KronewitterPeakDetector.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.PeakDetection.KronewitterPeakDetector.DetectPeaks(System.Collections.ObjectModel.Collection{PNNLOmics.Data.XYData})">
            <summary>
            Find and identify characteristics of peaks in raw XYData.  This includes finding candidate centroid peaks and noise thresholding.
            </summary>
            <param name="rawXYData">raw XYdata</param>
            <returns>Centroided peaks with noise removed</returns>
        </member>
        <member name="P:PNNLOmics.Algorithms.PeakDetection.KronewitterPeakDetector.CentroidParameters">
            <summary>
            Parameters used for centroiding algorithms
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.PeakDetection.KronewitterPeakDetector.ThresholdParameters">
            <summary>
            Parameters used for thresholding algorithms
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Features.UMC">
            <summary>
            Class that represents LC-MS, IMS-MS, LC-IMS-MS, etc. type data.
            </summary>
            <remarks>UMC stands for Unique Mass Class - see Advances in Proteomics Data Analysis and Display Using An Accurate Mass and Time Tag Approach in Mass Spectrometry Reviews, 2006. Zimmer et. al.</remarks>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMC.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMC.#ctor(PNNLOmics.Data.Features.UMC)">
            <summary>
            Copy Constructor.
            </summary>
            <param name="feature">Feature to copy data from.</param>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMC.Clear">
            <summary>
            Clears the datatype and resets the raw values to their default values.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMC.CompareTo(PNNLOmics.Data.Features.UMC)">
            <summary>
            Default Comparer used for the LCFeature class. Sorts by Monoisotopic Mass.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.UMC.ScanLCStartComparison">
            <summary>
            Compares the first LC Scan of two UMCS
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.UMC.ScanLCEndComparison">
            <summary>
            Compares the last LC Scan of two UMCS
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.UMC.AbundanceSumComparison">
            <summary>
            Compares the summed abundance of two UMCS
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.UMC.AbundanceMaximumComparison">
            <summary>
            Compares the maximum abundance of two UMCS
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.UMC.ChargeMaximumComparison">
            <summary>
            Compares the maximum charge state of two UMCS
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.UMC.ScanLCOfMaxAbundanceComparison">
            <summary>
            Compares the LC Scan that contains the most abundant MS Feature of two UMCS
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.UMC.MassMaxComparison">
            <summary>
            Compares the maximum monoisotopic mass of two UMCS
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.UMC.MassMinComparison">
            <summary>
            Compares the minimum monoisotopic mass of two UMCS
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.UMC.MassofMaxAbundanceComparison">
            <summary>
            Compares the monoisotopic mass of the most abundant MS Features associated with two UMCS
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.UMC.ScanLCStartAndMassComparison">
            <summary>
            Compares the first LC Scan then the monoisotopic mass of two UMCS
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.UMC.ScanLCAndMedianMassComparison">
            <summary>
            Compares the representative LC Scan and the median monoisotopic mass of two UMCS
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.UMC.ScanLCAndMassOfMaxAbundanceComparison">
            <summary>
            Compares the representative LC Scan and the monoisotopic mass of the most abundant MS Feature of two UMCS
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMC.ToString">
            <summary>
            Returns a basic string representation of the cluster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMC.Equals(System.Object)">
            <summary>
            Compares two objects' values to each other.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if similar, False if not.</returns>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMC.GetHashCode">
            <summary>
            Computes a hash code for the cluster.
            </summary>
            <returns>Hashcode as an integer.</returns>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.GroupID">
            <summary>
            The ID of the group the feature belongs to.  Where a group could be a dataset or factor.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.ToBeRemoved">
            <summary>
            True if the the UMC should be removed from the working List of UMCs.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.HasDaltonError">
            <summary>
            True if the the UMC has been corrected using Dalton Error Correction.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.ChargeMaximum">
            <summary>
            The maximum charge state of the UMC.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.ChargeMinimum">
            <summary>
            The minimum charge state of the UMC.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.AbundanceMaximum">
            <summary>
            The maximum abundance of the UMC.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.AbundanceSum">
            <summary>
            The sum of the abundance of the UMC.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.DaltonCorrectionMax">
            <summary>
            The maximum Dalton Correction to be applied to the UMC.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.ConformationIndex">
            <summary>
            The index of where the Conformation of the UMC occurred in respect to the rest of the Conformations.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.ConformationFitScore">
            <summary>
            The fit score determined by the Conformation Detection algorithm.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.ScanLCStart">
            <summary>
            The LC Scan where the UMC begins.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.ScanLCEnd">
            <summary>
            The LC Scan where the UMC ends. 
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.ScanLCOfMaxAbundance">
            <summary>
            The LC Scan that contains the most abundant MS Feature associated with the UMC.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.ScanLC">
            <summary>
            The LC Scan that contains the most abundant MS Feature associated with the UMC.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.MassMonoisotopicMinimum">
            <summary>
            The minimum monoisotopic mass of the UMC.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.MassMonoisotopicMaximum">
            <summary>
            The maximum monoisotopic mass of the UMC.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.MassMonoisotopicAverage">
            <summary>
            The average monoisotopic mass of the UMC.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.MassMonoisotopicMedian">
            <summary>
            The median monoisotopic mass of the UMC.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.MassMonoisotopicStandardDeviation">
            <summary>
            The standard deviation of the monoisotopic mass of the UMC.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.MassOfMaxAbundance">
            <summary>
            The monoisotopic mass of the most abundant MS Feature associated with the UMC.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.MSFeatureList">
            <summary>
            The List of MS Features associated with the UMC.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMC.UmcCluster">
            <summary>
            The UMC Cluster that is associated with the UMC.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.FeatureClustering.UMCSingleLinkageClusterer`2">
            <summary>
            Clusters UMC's (LC-MS Features, LC-IMS-MS Features) into UMC Clusters.
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.FeatureClustering.UMCSingleLinkageClusterer`2.m_massComparer">
            <summary>
            Compares the masses of two light features.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.UMCSingleLinkageClusterer`2.#ctor">
            <summary>
            Default Constructor.  This sets the parameters and tolerances to their default values.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.UMCSingleLinkageClusterer`2.LinkUMCs(System.Collections.Generic.List{PNNLOmics.Data.PairwiseDistance{`0}},System.Collections.Generic.Dictionary{System.Int32,`1})">
            <summary>
            Performs single linkage clustering over the data and returns a list of UMC clusters.
            </summary>
            <param name="data">Data to cluster on.</param>
            <param name="distances">pairwise distance between UMC's.</param>
            <returns>List of UMC clusters.</returns>        
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.UMCSingleLinkageClusterer`2.Cluster(System.Collections.Generic.List{`0},System.Collections.Generic.List{`1})">
            <summary>
            Clusters UMC's into UMC Clusters.
            </summary>
            <param name="data">List of data to cluster.</param>
            <returns>List of clustered data.</returns>
        </member>
        <member name="T:PNNLOmics.Data.Constants.Compound">
            <summary>
            This is an abstract Class designed to cover the most basic parameters of compound objects.
            Compounds are made up of elements.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Constants.Compound.GetMonoisotopicMass(PNNLOmics.Data.Constants.Compound)">
            <summary>
            This static class is used to calculate the Monoisotopic mass from the element values.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Constants.Compound.NewElements(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            sets up the elements in the compound
            </summary>
            <param name="c">number of carbon atoms</param>
            <param name="h">number of hydrogen atoms</param>
            <param name="n">number of nitrogen atoms</param>
            <param name="o">number of oxygen atoms</param>
            <param name="s">number of sulfur atoms</param>
            <param name="p">number of phosphorus atoms</param>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Compound.ChemicalFormula">
            <summary>
            Elemental Formula for the compound
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Compound.NumCarbon">
            <summary>
            Number of carbon atoms in the compound
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Compound.NumHydrogen">
            <summary>
            Number of hydrogen atoms in the compound
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Compound.NumNitrogen">
            <summary>
            Number of nitrogen atoms in the compound
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Compound.NumOxygen">
            <summary>
            Number of oxygen atoms in the compound
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Compound.NumSulfur">
            <summary>
            Number of sulfur atoms in the compound
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Compound.NumPhosphorus">
            <summary>
            Number of phosphorus atoms in the compound
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Compound.NumPotassium">
            <summary>
            Number of potassium atoms in the compound
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Compound.NumSodium">
            <summary>
            Number of sodium atoms in the compound
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.SubAtomicParticle">
            <summary>
            Encapsulates...
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.SubAtomicParticle.ParticleType">
            <summary>
            Gets or sets the type of sub-atomic particle.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.SpectralComparisons.ISpectralComparer">
            <summary>
            Interface for spectral comparison algorithms
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.SpectralComparisons.ISpectralComparer.CompareSpectra(PNNLOmics.Data.MSSpectra,PNNLOmics.Data.MSSpectra)">
            <summary>
            Compares two spectra together.
            </summary>
            <param name="spectraX"></param>
            <param name="spectraY"></param>
            <returns>Score based on how similar they are.</returns>
        </member>
        <member name="T:PNNLOmics.Algorithms.FeatureMatcher.MSnLinker.BoxMSnLinker">
            <summary>
            Maps MS/MS data to MS features.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.FeatureMatcher.MSnLinker.IMSnLinker">
            <summary>
            Interface for linking features together from MSMS to MSn
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.MSnLinker.IMSnLinker.LinkMSFeaturesToMSn(System.Collections.Generic.List{PNNLOmics.Data.Features.MSFeatureLight},System.Collections.Generic.List{PNNLOmics.Data.MSSpectra},PNNLOmics.Data.ISpectraProvider)">
            <summary>
            Links MS Features to MSMS Spectra.
            </summary>
            <param name="features"></param>
            <param name="fragmentSpectra">Fragmentation spectra to link</param>
            <param name="rawSpectraProvider">Provider that provides access to raw scans if more data is required.</param>
            <returns>The number of a times a MSn spectra was mapped to a feature using the spectrum ID as a key.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.MSnLinker.IMSnLinker.LinkMSFeaturesToMSn(System.Collections.Generic.List{PNNLOmics.Data.Features.MSFeatureLight},System.Collections.Generic.List{PNNLOmics.Data.MSSpectra})">
            <summary>
            Links MS Features to MSMS Spectra.
            </summary>
            <param name="features"></param>
            <param name="fragmentSpectra">Fragmentation spectra to link</param>
            <returns>The number of a times a MSn spectra was mapped to a feature using the spectrum ID as a key.</returns>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.MSnLinker.IMSnLinker.Tolerances">
            <summary>
            Gets or sets the feature tolerances to use.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.MSnLinker.BoxMSnLinker.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.MSnLinker.BoxMSnLinker.LinkMSFeaturesToMSn(System.Collections.Generic.List{PNNLOmics.Data.Features.MSFeatureLight},System.Collections.Generic.List{PNNLOmics.Data.MSSpectra})">
            <summary>
            Links MS features to MSMS (or MSn) data.
            </summary>
            <param name="features">Features to link.</param>
            <param name="spectra">Spectra to link to.</param>
            <param name="rawSpectraProvider">Provides access to raw scans if more data is required.</param>
            <returns>A map of a ms spectra id to the number of times it was mapped.</returns>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.MSnLinker.BoxMSnLinker.Tolerances">
            <summary>
            Gets or sets the feature tolerances to use.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.MSnLinker.BoxMSnLinker.AdductMass">
            <summary>
            Gets or sets the adduct mass (e.g. proton, H+)
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Distance.PowerEuclideanDistanceMetric`1.EuclideanDistance(`0,`0)">
            <summary>
            Calculates the Euclidean distance based on drift time, aligned mass, and aligned NET.
            </summary>
            <param name="x">Feature x.</param>
            <param name="y">Feature y.</param>
            <returns>Distance calculated as </returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Distance.PowerEuclideanDistanceMetric`1.EuclideanDistance(`0,`0,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the weighted Euclidean distance based on drift time, aligned mass, and aligned NET.
            </summary>
            <param name="x">Feature x.</param>
            <param name="y">Feature y.</param>
            <returns>Distance calculated as </returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACFDR.#ctor">
            <summary>
            Generic constructor.  Sets cutoff to 0.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACFDR.#ctor(System.Double)">
            <summary>
            Constructor to set cutoff to passed value.
            </summary>
            <param name="cutoff">Value at which to set cutoff.</param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACFDR.SetLabel(System.Double)">
            <summary>
            Sets the label for the given cutoff.
            </summary>
            <param name="cutoff">Cutoff to set a label for.</param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACFDR.Clear">
            <summary>
            Set the cutoff to 0 with a 100% FDR.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACFDR.FillLine(System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Fills in the required data for a cutoff level.
            </summary>
            <param name="fdr">The false discovery rate (FDR) at the cutoff.</param>
            <param name="matches">The number of matches found at the cutoff.</param>
            <param name="falseMatches">The estimated number of false matches found at the cutoff.  Rounded to an integer value.</param>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.STACFDR.FDR">
            <summary>
            Gets or sets the FDR for the given cutoff.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.STACFDR.Cutoff">
            <summary>
            Gets or sets the cutoff.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.STACFDR.ConformationMatches">
            <summary>
            Gets or sets the number of Unique Conformation Matches for the cutoff level.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.STACFDR.AMTMatches">
            <summary>
            Gets or sets the number of Unique Mass Tag Matches for the cutoff level.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.STACFDR.FalseMatches">
            <summary>
            Gets or sets the number of false matches at the cutoff.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.STACFDR.Label">
            <summary>
            Gets or sets the display for the cutoff.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.Libraries.ElementLibrary">
            <summary>
            Sets up the element library by loading the information from the disk
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Constants.Libraries.ElementLibrary.LoadXML(System.String,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{PNNLOmics.Data.Constants.Element}@)">
            <summary>
            This is a Class designed to load periodic table of the elements data from a XML file PNNLOmicsElementData.xml
            IUPAC 2000 Atomic Weights of the Elements (published 2003) was used.
            Differences from the old version:  Elements H, B, C, N, O, Na, P, S, Cl, K, Ca were updated.  Table 5 in the paper has the probabilities (best measurement column was used).
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Constants.Libraries.ElementLibrary.LoadLibrary">
            <summary>
            This is a Class designed to convert raw values into element objects (including masses and isotope abundances)
            and create an element dictionary searchable by key string such as "C" for carbon.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.MSMSCluster">
            <summary>
            Cluster of MS/MS spectra using matches through features.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.MSMSCluster.Clear">
            <summary>
            Resets the cluster.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSMSCluster.Features">
            <summary>
            Gets or sets the list of available features.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSMSCluster.MeanScore">
            <summary>
            Gets or sets the list of spectra associated with the 
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSMSCluster.ID">
            <summary>
            Gets or sets the id 
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.CrossRingName">
            <summary>
            Monosaccharide Cross Ring Cleavages (CRF = cross ring F?)
            </summary>
        </member>
        <member name="T:PNNLOmics.Databases.DatabaseHandler">
            <summary>
            Base class for Wrapper classes for handling databases
            </summary>
        </member>
        <member name="M:PNNLOmics.Databases.DatabaseHandler.CreateDatabase">
            <summary>
            Creates a database, 
            automatically overwrites any existing file
            </summary>
            <returns>True, if the function completes successfully</returns>
        </member>
        <member name="M:PNNLOmics.Databases.DatabaseHandler.GetDatabaseInformation">
            <summary>
            Gets the table information regarding the database
            </summary>
            <returns>Datatable of all the information</returns>
        </member>
        <member name="M:PNNLOmics.Databases.DatabaseHandler.WriteDatasetToDatabase(System.Data.DataSet)">
            <summary>
            Commits the tables within a DataSet to the database
            </summary>
            <param name="MainData">DataSet to commit to the database</param>
            <returns>True, if the data is committed successfully</returns>
        </member>
        <member name="M:PNNLOmics.Databases.DatabaseHandler.TableExists(System.String)">
            <summary>
            Determines if a table is present in the database or not
            </summary>
            <param name="TableName">Name of table</param>
            <returns>True if table is present, otherwise false</returns>
        </member>
        <member name="M:PNNLOmics.Databases.DatabaseHandler.GetTable(System.String)">
            <summary>
            Retrieves a table from the database and returns it as a DataTable
            </summary>
            <param name="TableName">Name of table to retrieve</param>
            <returns>Table from Database</returns>
        </member>
        <member name="M:PNNLOmics.Databases.DatabaseHandler.SelectTable(System.String,System.String)">
            <summary>
            Selects a table from a given query
            </summary>
            <param name="TableName">Name to give to the output table</param>
            <param name="Command">SQL query to generate the table that is returned</param>
            <returns>Table generated from the supplied SQL query, null if query fails</returns>
        </member>
        <member name="M:PNNLOmics.Databases.DatabaseHandler.RunNonQuery(System.String)">
            <summary>
            Useful method to execute a NonQuery on the Database
            </summary>
            <param name="Command">SQL command to issue</param>
            <returns>True, if the SQL statement completed successfully</returns>
        </member>
        <member name="M:PNNLOmics.Databases.DatabaseHandler.DropTable(System.String)">
            <summary>
            If a table exists in the database, this will remove the table
            </summary>
            <param name="TableName">Name of table to delete</param>
            <returns>True, if table is dropped successfully</returns>
        </member>
        <member name="M:PNNLOmics.Databases.DatabaseHandler.CreateIndex(System.String,System.String,System.String)">
            <summary>
            Creates an index in the database
            </summary>
            <param name="Table">Table name</param>
            <param name="Column">Name of Column to index within the table</param>
            <param name="IndexName">Name of index</param>
            <returns>True, if index is created successfully</returns>
        </member>
        <member name="M:PNNLOmics.Databases.DatabaseHandler.GetListOfTablesInDatabase">
            <summary>
            Gets a list of the table names in the database
            </summary>
            <returns>List of tables names in the SQLite database</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.SpectralComparisons.SpectralNormalizedDotProductComparer.#ctor">
            <summary>
            Constructor that keeps the top forty percent of ions in a spectra by default.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.SpectralComparisons.SpectralNormalizedDotProductComparer.#ctor(System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="percent">Percentage of most intense ions to keep in the spectra.</param>
        </member>
        <member name="M:PNNLOmics.Algorithms.SpectralComparisons.SpectralNormalizedDotProductComparer.CompareSpectra(PNNLOmics.Data.MSSpectra,PNNLOmics.Data.MSSpectra)">
            <summary>
            Computes the dot product of two spectra.
            </summary>
            <param name="spectraX">Spectrum X</param>
            <param name="spectraY">Spectrum Y</param>
            <returns>Normalized Dot Product</returns>
        </member>
        <member name="P:PNNLOmics.Algorithms.SpectralComparisons.SpectralNormalizedDotProductComparer.TopPercent">
            <summary>
            Gets or sets the top spectra values to keep.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctions.Chebyshev">
            <summary>
            Basis function for the LM Algorithm using First Order Chebyshev
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctions.Chebyshev.FunctionDelegate(System.Double[],System.Double[],System.Double@,System.Object)">
            <summary>
            Evalutates the second order chebyshev polynomials
            </summary>
            <param name="c">Set of coefficients</param>
            <param name="x">Input variables</param>
            <param name="functionResult">Returned sum value of your function</param>
            <param name="obj">?</param>
        </member>
        <member name="T:PNNLOmics.Algorithms.Alignment.AlignmentMatch">
            <summary>
            
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.AlignmentMatch.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="aligneeNETStart"></param>
            <param name="aligneeNetEnd"></param>
            <param name="referenceNETStart"></param>
            <param name="referenceNETEnd"></param>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.AlignmentMatch.AlignFeatureNET(System.Double)">
            <summary>
            
            </summary>
            <param name="oldNET"></param>
            <returns></returns>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentMatch.AligneeNETStart">
            <summary>
            
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentMatch.AligneeNETEnd">
            <summary>
            
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentMatch.ReferenceNETStart">
            <summary>
            
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentMatch.ReferenceNETEnd">
            <summary>
            
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentMatch.Score">
            <summary>
            
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.UserUnit">
            <summary>
            Encapsulates...
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Constants.UserUnit.#ctor(System.String,System.String)">
            <summary>
            constructor for a minimal userUnit that has the required name and symbol
            </summary>
            <param name="name">name to call the user unit such as sodium</param>
            <param name="symbol">short name to reference it by, such as Na for sodium</param>
        </member>
        <member name="M:PNNLOmics.Data.Constants.UserUnit.#ctor(System.String,System.String,System.Double,PNNLOmics.Data.Constants.UserUnitName)">
            <summary>
            constructor for a full userUnit that has the all fields
            </summary>
            <param name="name">name to call the user unit such as sodium</param>
            <param name="symbol">short name to reference it by, such as Na for sodium</param>
            <param name="mass">monoisotopic mass</param>
            <param name="userUnitName">enum userunitname (user01, user02, user03)</param>
        </member>
        <member name="M:PNNLOmics.Data.Constants.UserUnit.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.UserUnit.UserUnitType">
            <summary>
            Gets or sets the type of UserUnit.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.SubAtomicParticleName">
            <summary>
            Sub atomic particles
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.FeatureClustering.UMCAverageLinkageClusterer`2.m_massComparer">
            <summary>
            Compares the masses of two light features.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.UMCAverageLinkageClusterer`2.#ctor">
            <summary>
            Default Constructor.  This sets the parameters and tolerances to their default values.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.UMCAverageLinkageClusterer`2.Cluster(System.Collections.Generic.List{`0},System.Collections.Generic.List{`1})">
            <summary>
            Clusters UMC's into UMC Clusters using Average Linkage Clustering.
            </summary>
            <param name="data">List of data to cluster.</param>
            <returns>List of clustered data.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.UMCAverageLinkageClusterer`2.AverageLinkUMCs(System.Collections.Generic.List{PNNLOmics.Data.PairwiseDistance{`0}},System.Collections.Generic.Dictionary{System.Int32,`1})">
            <summary>
            Performs average linkage clustering over the data and returns a list of UMC clusters.
            </summary>
            <param name="data">Data to cluster on.</param>
            <param name="distances">pairwise distance between UMC's.</param>
            <returns>List of UMC clusters.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.UMCAverageLinkageClusterer`2.AreClustersWithinTolerance(`1,`1)">
            <summary>
            Determines if two clusters are within mass, NET, and drift time tolerances
            </summary>
            <param name="clusterX">One of the two clusters to test</param>
            <param name="clusterY">One of the two clusters to test</param>
            <returns>True if clusters are within tolerance, false otherwise</returns>
        </member>
        <member name="P:PNNLOmics.Utilities.PathUtil.AssemblyDirectory">
            <summary>
            Returns the path to the directory containing the currently executing DLL
            </summary>
            <remarks>
            Use of GetExecutingAssembly().CodeBase is preferred to using GetExecutingAssembly().Location
            because when NUnit executes Unit Tests, .Location returns a path to a temporary folder instead of the path to the DLL
            </remarks>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.ExpectationMaximization.UpdateNormalMeanVector(System.Collections.Generic.List{MathNet.Numerics.LinearAlgebra.Matrix},System.Collections.Generic.List{System.Double})">
            <summary>
            Update mean vector of normal distribution.  Used for Normal-Uniform mixture.
            </summary>
            <param name="dataList">List of difference matrices.</param>
            <param name="alphaList">List of mixture estimates corresponding to differences.</param>
            <returns>Updated Matrix containing mean of normal distribution.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.ExpectationMaximization.UpdateNormalMeanVector(System.Collections.Generic.List{MathNet.Numerics.LinearAlgebra.Matrix},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Boolean)">
            <summary>
            Update mean vector of normal distribution.  Used for Normal-Normal-Uniform mixture.
            </summary>
            <param name="dataList">List of difference matrices.</param>
            <param name="alphaList">List of mixture estimates corresponding to differences.</param>
            <param name="priorList">List of prior probabilities corresponding to differences.</param>
            <param name="secondNormal">Whether the data is from the second of the normal distributions, i.e. incorrect in AMT database.</param>
            <returns>Updated Matrix containing mean of normal distribution.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.ExpectationMaximization.UpdateNormalCovarianceMatrix(System.Collections.Generic.List{MathNet.Numerics.LinearAlgebra.Matrix},MathNet.Numerics.LinearAlgebra.Matrix,System.Collections.Generic.List{System.Double},System.Boolean)">
            <summary>
            Update covariance matrix of normal distribution.  Used for Normal-Uniform mixture.
            </summary>
            <param name="dataList">List of difference matrices.</param>
            <param name="meanVector">Matrix containing mean parameters for the normal distribution.</param>
            <param name="alphaList">List of mixture estimates corresponding to differences</param>
            <param name="independent">Whether the dimensions of the normal distribution should be considered normal.  Returns a diagonal Matrix if true.  Should use false if unknown.</param>
            <returns>Updated Matrix containing covariances of normal distribution.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.ExpectationMaximization.UpdateNormalCovarianceMatrix(System.Collections.Generic.List{MathNet.Numerics.LinearAlgebra.Matrix},MathNet.Numerics.LinearAlgebra.Matrix,System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Boolean,System.Boolean)">
            <summary>
            Update covariance matrix of normal distribution.  Used for Normal-Normal-Uniform mixture.
            </summary>
            <param name="dataList">List of difference matrices.</param>
            <param name="meanVector">Matrix containing mean parameters for the normal distribution.</param>
            <param name="alphaList">List of mixture estimates corresponding to differences</param>
            <param name="priorList">List of prior probabilities corresponding to differences.</param>
            <param name="independent">Whether the dimensions of the normal distribution should be considered normal.  Returns a diagonal Matrix if true.  Should use false if unknown.</param>
            <param name="secondNormal">Whether the data is from the second of the normal distributions, i.e. incorrect in AMT database.</param>
            <returns>Updated Matrix containing covariances of normal distribution.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.ExpectationMaximization.NormalUniformMixture(System.Collections.Generic.List{MathNet.Numerics.LinearAlgebra.Matrix},MathNet.Numerics.LinearAlgebra.Matrix@,MathNet.Numerics.LinearAlgebra.Matrix@,MathNet.Numerics.LinearAlgebra.Matrix,System.Double@,System.Boolean)">
            <summary>
            Performs the EM algorithm on the given data and returns the parameters.
            </summary>
            <param name="dataList">A List containing matrices of the data.  These matrices must be of the same dimension as the mean vector.</param>
            <param name="meanVector">An [n x 1] matrix initially containing rough estimates and returning the mean of the normal distribution.</param>
            <param name="covarianceMatrix">An [n x n] positive definite matrix initially containing rough estimates and returning the covariance matrix for the normal distribution.</param>
            <param name="uniformTolerances">An [n x 1] matrix containing the half-width of the uniform distribution in each of the n-dimensions.</param>
            <param name="mixtureParameter">The proportion of the List thought to be from the normal distribution.  An initial estimate is passed and a refined proportion is returned.</param>
            <param name="logLikelihood">A placeholder to which the loglikelihood of the function will be returned.</param>
            <param name="independent">true/false:  Whether or not the multivariate normal distribution should be treated as independent, i.e. a diagonal covariance matrix.</param>
            <returns>A boolean flag indicating whether the EM algorithm achieved convergence.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.ExpectationMaximization.NormalUniformLogLikelihood(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,System.Double,System.Double,System.Double@)">
            <summary>
            Calculate the loglikelihood for a normal-uniform mixture.
            </summary>
            <param name="data">Matrix of data.</param>
            <param name="meanVector">Matrix containing the current means.</param>
            <param name="covarianceMatrix">The current covariance matrix.</param>
            <param name="uniformDensity">The density of the uniform distribution.</param>
            <param name="mixtureParameter">The current mixture parameter.</param>
            <returns>The value of the loglikelihood evaluated at data.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.ExpectationMaximization.NormalUniformLogLikelihood(System.Collections.Generic.List{MathNet.Numerics.LinearAlgebra.Matrix},MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,System.Double,System.Double)">
            <summary>
            Calculate the loglikelihood for a normal-uniform mixture.
            </summary>
            <param name="data">List of Matrices of data.</param>
            <param name="meanVector">Matrix containing the current means.</param>
            <param name="covarianceMatrix">The current covariance matrix.</param>
            <param name="uniformDensity">The density of the uniform distribution.</param>
            <param name="mixtureParameter">The current mixture parameter.</param>
            <returns>The value of the loglikelihood evaluated over dataList.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.ExpectationMaximization.UpdateNormalUniformMixtureParameter(System.Collections.Generic.List{MathNet.Numerics.LinearAlgebra.Matrix},MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,System.Double,System.Double,System.Collections.Generic.List{System.Double}@)">
            <summary>
            Update the mixture parameter for the normal-uniform mixture model.
            </summary>
            <param name="dataList">List of matrices containing the data.</param>
            <param name="meanVector">Matrix containing the current means.</param>
            <param name="covarianceMatrix">The current covariance matrix.</param>
            <param name="mixtureParameter">The current mixture parameter.</param>
            <param name="uniformDensity">The density of the uniform distribution.</param>
            <param name="alphaList">A List of observation-wise mixture proportion estimates to be updated and returned.</param>
            <returns>The updated mixture parameter.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.ExpectationMaximization.NormalNormalUniformLogLikelihood(MathNet.Numerics.LinearAlgebra.Matrix,System.Double,MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,System.Double,System.Double,System.Double@)">
            <summary>
            Calculate the loglikelihood for a normal-normal-uniform mixture.
            </summary>
            <param name="data">Matrix of data.</param>
            <param name="prior">The prior probability of being correct, i.e. the probability of being from the normal distribution with parameters meanVectorT and covarianceMatrixT.</param>
            <param name="meanVectorT">Matrix containing the current means for the true normal distribution.</param>
            <param name="covarianceMatrixT">The current covariance matrix for the true normal distribution.</param>
            <param name="meanVectorF">Matrix containing the current means for the false normal distribution.</param>
            <param name="covarianceMatrixF">The current covariance matrix for the false normal distribution.</param>
            <param name="uniformDensity">The density of the uniform distribution.</param>
            <param name="mixtureParameter">The current mixture parameter.</param>
            <returns>The value of the loglikelihood evaluated at data.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.ExpectationMaximization.NormalNormalUniformLogLikelihood(System.Collections.Generic.List{MathNet.Numerics.LinearAlgebra.Matrix},System.Collections.Generic.List{System.Double},MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,System.Double,System.Double)">
            <summary>
            Calculate the loglikelihood for a normal-normal-uniform mixture.
            </summary>
            <param name="data">List of Matrices of data.</param>
            <param name="prior">List of prior probabilities of being correct, i.e. the probability of being from the normal distribution with parameters meanVectorT and covarianceMatrixT.</param>
            <param name="meanVectorT">Matrix containing the current means for the true normal distribution.</param>
            <param name="covarianceMatrixT">The current covariance matrix for the true normal distribution.</param>
            <param name="meanVectorF">Matrix containing the current means for the false normal distribution.</param>
            <param name="covarianceMatrixF">The current covariance matrix for the false normal distribution.</param>
            <param name="uniformDensity">The density of the uniform distribution.</param>
            <param name="mixtureParameter">The current mixture parameter.</param>
            <returns>The value of the loglikelihood evaluated over data.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Utilities.ExpectationMaximization.UpdateNormalNormalUniformMixtureParameter(System.Collections.Generic.List{MathNet.Numerics.LinearAlgebra.Matrix},System.Collections.Generic.List{System.Double},MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,System.Double,System.Double,System.Collections.Generic.List{System.Double}@)">
            <summary>
            Update the mixture parameter for the normal-normal-uniform mixture model.
            </summary>
            <param name="dataList">List of matrices containing the data.</param>
            <param name="prior">The prior probability of being correct, i.e. the probability of being from the normal distribution with parameters meanVectorT and covarianceMatrixT.</param>
            <param name="meanVectorT">Matrix containing the current means for the true normal distribution.</param>
            <param name="covarianceMatrixT">The current covariance matrix for the true normal distribution.</param>
            <param name="meanVectorF">Matrix containing the current means for the false normal distribution.</param>
            <param name="covarianceMatrixF">The current covariance matrix for the false normal distribution.</param>
            <param name="mixtureParameter">The current mixture parameter.</param>
            <param name="uniformDensity">The density of the uniform distribution.</param>
            <param name="alphaList">A List of observation-wise mixture proportion estimates to be updated and returned.</param>
            <returns>The updated mixture parameter.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.#ctor(System.Collections.Generic.List{`0},System.Collections.Generic.List{`1},PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters)">
            <summary>
            Default constructor for use in matching features.  Uses passed parameters to calculate desired results.
            </summary>
            <param name="observedFeatureList">List of features observed in an analysis.  Generally UMC or UMCCluster.</param>
            <param name="targetFeatureList">List of features to be matched to.  Generally AMTTags.</param>
            <param name="matchParameters">FeatureMatcherParameters object containing initial parameters and algorithm settings.</param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.Clear">
            <summary>
            Reset all algorithm results to default values.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.SetChargeStateList">
            <summary>
            Set the list of charge states to be used in IMS calculations.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.FindMatches(System.Collections.Generic.List{`0},System.Collections.Generic.List{`1},PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherTolerances,System.Double)">
            <summary>
            Find a list of matches between two lists.
            </summary>
            <param name="shortObservedList">List of observed features.  Possibly a subset of the entire list corresponding to a particular charge state.</param>
            <param name="shortTargetList">List of target features.  Possibly a subset of the entire list corresponding to a particular charge state.</param>
            <param name="tolerances">Tolerances to be used for matching.</param>
            <param name="shiftAmount">A fixed shift amount to use for populating the shifted match list.</param>
            <returns>A list of type FeatureMatch containing matches within the defined region.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.SetSTACCutoffs">
            <summary>
            Populate the FDR table with default cutoffs.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.PopulateSTACFDRTable(System.Collections.Generic.List{PNNLOmics.Data.Features.FeatureMatch{`0,`1}})">
            <summary>
            Fills in the values for the STAC FDR table.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.ExtractChargeStateList``1(System.Collections.Generic.List{``0},System.Int32@,System.Int32)">
            <summary>
            Find the subset of a list which has the same charge state.
            </summary>
            <typeparam name="T">Any class derived from Feature.</typeparam>
            <param name="featureList">Original list of features from which to extract the subset.</param>
            <param name="startIndex">Index at which to start search.  Set to the value of the last such item.</param>
            <param name="chargeState">The charge state to search for a subset of.</param>
            <returns>A list of features with the given charge state.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.SetMassErrorHistogramFDR">
            <summary>
            Sets the false discovery rate by creating a histogram of the mass errors and comparing the proportion above a threshhold to the area below.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.WithinMassTolerance(`0,`1,System.Double,System.Double,System.Double@)">
            <summary>
            TODO:  Fill this in...
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="observedFeature"></param>
            <param name="targetFeature"></param>
            <param name="massTolerancePPM"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.WithinNETTolerance(`0,`1,System.Double)">
            <summary>
            TODO:  Fill this in...
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="observedFeature"></param>
            <param name="targetFeature"></param>
            <param name="netTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.withinDriftTimeTolerance(`0,`1,System.Single)">
            <summary>
            TODO:  Another summary...
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="observedFeature"></param>
            <param name="targetFeature"></param>
            <param name="driftTimeTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.MatchFeatures">
            <summary>
            Function to call to re-calculate algorithm results. [gord - following comment lies!] Called within constructor by default.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.ReportError(System.String)">
            <summary>
            Report an error message using OnErrorMessage
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.ReportError(PNNLOmics.Utilities.MessageEventArgs)">
            <summary>
            Report an error message using OnErrorMessage
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.ReportMessage(System.String)">
            <summary>
            Report a progress message using OnMessage
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.ReportMessage(PNNLOmics.Utilities.MessageEventArgs)">
            <summary>
            Report a progress message using OnMessage
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.MatchParameters">
            <summary>
            Gets or sets the initial parameters used for matching.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.MatchList">
            <summary>
            Gets the list of feature matches.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.ShiftedMatchList">
            <summary>
            Gets the list of features matched with a shift.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.ShiftFDR">
            <summary>
            Gets the FDR calculated by using a fixed shift.  Calculated as (# shifted matches)/(# shifted matches + # non-shifted matches).
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.ShiftConservativeFDR">
            <summary>
            Gets the FDR calculated by using a fixed shift.  Calculated as 2*(# shifted matches)/(# shifted matches + # non-shifted matches).
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.ErrorHistogramFDR">
            <summary>
            Gets the FDR calculated by using a mass error histogram.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.STACParameterList">
            <summary>
            Gets the list of parameters trained by STAC.  Each entry is a different charge state.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.STACFDRTable">
            <summary>
            Get the STAC FDR table.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.RefinedToleranceList">
            <summary>
            Gets the list of refined tolerances used for SLiC and shift.  Each entry is a different charge state.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.FeatureMatcher`2.SLiCParameters">
            <summary>
            Gets the parameters used in calculating SLiC.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.#ctor(System.Boolean)">
            <summary>
            Default constructor for STAC parameters.
            </summary>
            <param name="driftTime">Whether drift times will be used in the analysis.</param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.Clear(System.Boolean)">
            <summary>
            Resets parameters to default values.
            </summary>
            <param name="driftTime">Whether to use drift times in the analysis.</param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.TrainSTAC``2(System.Collections.Generic.List{PNNLOmics.Data.Features.FeatureMatch{``0,``1}},PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherTolerances,System.Boolean,System.Boolean)">
            <summary>
            Trains the STAC parameters using the passed data.
            </summary>
            <typeparam name="T">Observed feature to be matched.  Derived from Feature.  Usually UMC or UMCCluster.</typeparam>
            <typeparam name="U">Feature to be matched to.  Derived from Feature.  Usually AMTTag.</typeparam>
            <param name="featureMatchList">List of FeatureMatches to train parameters on.</param>
            <param name="uniformTolerances">User provided tolerances.</param>
            <param name="useDriftTime">Whether to train the data on the drift time dimension.</param>
            <returns>A boolean flag indicating whether convergence was reached.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.SetSTACScores``2(System.Collections.Generic.List{PNNLOmics.Data.Features.FeatureMatch{``0,``1}},PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherTolerances,System.Boolean,System.Boolean)">
            <summary>
            Function to calculate STAC score.
            </summary>
            <typeparam name="T">Observed feature to be matched.  Derived from Feature.  Usually UMC or UMCCluster.</typeparam>
            <typeparam name="U">Feature to be matched to.  Derived from Feature.  Usually AMTTag.</typeparam>
            <param name="featureMatchList">List of FeatureMatches to calculate scores for.</param>
            <param name="uniformDensity">Density of uniform distribution.</param>
            <param name="useDriftTime">Whether to use drift times in the calculations.</param>
            <param name="usePrior">Whether to use prior probabilities in the calculation of the STAC score.</param>
            <returns>The STAC score corresponding to featureMatch.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.SetSTACSpecificitiesFeature``2(System.Collections.Generic.List{PNNLOmics.Data.Features.FeatureMatch{``0,``1}})">
            <summary>
            Set the STAC Specificity scores for a list of matches.
            </summary>
            <typeparam name="T">Observed feature to be matched.  Derived from Feature.  Usually UMC or UMCCluster.</typeparam>
            <typeparam name="U">Feature to be matched to.  Derived from Feature.  Usually AMTTag.</typeparam>
            <param name="featureMatchList">List of FeatureMatches to calculate Specificities for.</param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.SetSTACSpecificitiesMassTag``2(System.Collections.Generic.List{PNNLOmics.Data.Features.FeatureMatch{``0,``1}})">
            <summary>
            Set the STAC Specificity scores for a list of matches.
            </summary>
            <typeparam name="T">Observed feature to be matched.  Derived from Feature.  Usually UMC or UMCCluster.</typeparam>
            <param name="featureMatchList">List of FeatureMatches to calculate Specificities for.</param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.PerformSTAC``2(System.Collections.Generic.List{PNNLOmics.Data.Features.FeatureMatch{``0,``1}},PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherTolerances,System.Boolean,System.Boolean)">
            <summary>
            Function to train STAC parameters and to set STAC scores and Specificities.
            </summary>
            <typeparam name="T">Observed feature to be matched.  Derived from Feature.  Usually UMC or UMCCluster.</typeparam>
            <typeparam name="U">Feature to be matched to.  Derived from Feature.  Usually AMTTag.</typeparam>
            <param name="featureMatchList">List of FeatureMatches to perform STAC on.</param>
            <param name="uniformDensity">Density of uniform distribution.</param>
            <param name="useDriftTime">Whether to use drift times in the calculations.</param>
            <param name="usePrior">Whether to use prior probabilities in the calculation of the STAC score.</param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.Clear">
            <summary>
            Overload Clear function to reset number of iterations.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.TrainWithPrior``2(System.Collections.Generic.List{PNNLOmics.Data.Features.FeatureMatch{``0,``1}},System.Double,System.Boolean)">
            <summary>
            Function to calculate STAC parameters using prior probabilities.
            </summary>
            <typeparam name="T">The type of the observed feature.  Derived from Feature.</typeparam>
            <param name="featureMatchList">List of FeatureMatches to train data on.</param>
            <param name="uniformDensity">Density of uniform distribution.</param>
            <param name="useDriftTime">Whether to use drift times in the calculations.</param>
            <returns>A boolean flag indicating the convergence state of the algorithm.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.TrainWithoutPrior``2(System.Collections.Generic.List{PNNLOmics.Data.Features.FeatureMatch{``0,``1}},System.Double,System.Boolean)">
            <summary>
            Train the STAC parameters without using prior probabilities.
            </summary>
            <typeparam name="T">The type of the observed feature.  Derived from Feature.</typeparam>
            <typeparam name="U">The type of the target feature.  Derived from Feature.</typeparam>
            <param name="featureMatchList">List of FeatureMatches to train data on.</param>
            <param name="uniformDensity">Density of uniform distribution.</param>
            <param name="useDriftTime">Whether to use drift times in the calculations.</param>
            <returns>A boolean flag indicating the convergence state of the algorithm.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.CalculateNULogLikelihood``2(PNNLOmics.Data.Features.FeatureMatch{``0,``1},System.Double,System.Double@)">
            <summary>
            Calculate the loglikelihood for a match with the current parameters.
            </summary>
            <typeparam name="T">The type of the observed feature.  Derived from Feature.</typeparam>
            <typeparam name="U">The type of the target feature.  Derived from Feature.</typeparam>
            <param name="featureMatch">FeatureMatch to evaluate at.</param>
            <param name="uniformDensity">Density of uniform distribution.</param>
            <returns>The value of the loglikelihood evaluated at featureMatch.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.CalculateNULogLikelihood``2(System.Collections.Generic.List{PNNLOmics.Data.Features.FeatureMatch{``0,``1}},System.Double)">
            <summary>
            Calculate the loglikelihood for matches with the current parameters.
            </summary>
            <typeparam name="T">The type of the observed feature.  Derived from Feature.</typeparam>
            <typeparam name="U">The type of the target feature.  Derived from Feature.</typeparam>
            <param name="featureMatchList">List of FeatureMatches to evaluate at.</param>
            <param name="uniformDensity">Density of uniform distribution.</param>
            <returns>The value of the loglikelihood evaluated over featureMatchList.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.CalculateNULogLikelihood``2(System.Collections.Generic.List{PNNLOmics.Data.Features.FeatureMatch{``0,``1}},System.Double,System.Boolean)">
            <summary>
            Calculate the loglikelihood for matches with the current parameters.
            </summary>
            <typeparam name="T">The type of the observed feature.  Derived from Feature.</typeparam>
            <typeparam name="U">The type of the target feature.  Derived from Feature.</typeparam>
            <param name="featureMatchList">List of FeatureMatches to evaluate at.</param>
            <param name="uniformDensity">Density of uniform distribution.</param>
            <param name="useDriftTime">Whether to use drift times in the calculations.</param>
            <returns>The value of the loglikelihood evaluated over featureMatchList.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.UpdateNUMixtureParameter``2(System.Collections.Generic.List{PNNLOmics.Data.Features.FeatureMatch{``0,``1}},System.Double,System.Collections.Generic.List{System.Double}@)">
            <summary>
            Update the mixture proportion for the normal-uniform mixture model.
            </summary>
            <typeparam name="T">The type of the observed feature.  Derived from Feature.</typeparam>
            <typeparam name="U">The type of the target feature.  Derived from Feature.</typeparam>
            <param name="featureMatchList">List of FeatureMatches to evaluate at.</param>
            <param name="uniformDensity">Density of uniform distribution.</param>
            <param name="alphaList">List to be filled with individual mixture values.</param>
            <returns>The updated mixture proportion.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.CalculateNNULogLikelihood``2(PNNLOmics.Data.Features.FeatureMatch{``0,``1},System.Double,System.Double@)">
            <summary>
            Calculate the loglikelihood for a match with the current parameters.
            </summary>
            <typeparam name="T">The type of the observed feature.  Derived from Feature.</typeparam>
            <param name="featureMatch">FeatureMatch to evaluate at.</param>
            <param name="uniformDensity">Density of uniform distribution.</param>
            <returns>The value of the loglikelihood evaluated at featureMatch.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.CalculateNNULogLikelihood``2(System.Collections.Generic.List{PNNLOmics.Data.Features.FeatureMatch{``0,``1}},System.Double)">
            <summary>
            Calculate the loglikelihood for matches with the current parameters.
            </summary>
            <typeparam name="T">The type of the observed feature.  Derived from Feature.</typeparam>
            <param name="featureMatchList">List of FeatureMatches to evaluate at.</param>
            <param name="uniformDensity">Density of uniform distribution.</param>
            <returns>The value of the loglikelihood evaluated over featureMatchList.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.CalculateNNULogLikelihood``2(System.Collections.Generic.List{PNNLOmics.Data.Features.FeatureMatch{``0,``1}},System.Double,System.Boolean,System.Collections.Generic.List{System.Double}@)">
            <summary>
            Calculate the loglikelihood for matches with the current parameters.
            </summary>
            <typeparam name="T">The type of the observed feature.  Derived from Feature.</typeparam>
            <param name="featureMatchList">List of FeatureMatches to evaluate at.</param>
            <param name="uniformDensity">Density of uniform distribution.</param>
            <param name="useDriftTime">Whether to use drift times in the calculations.</param>
            <returns>The value of the loglikelihood evaluated over featureMatchList.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.UpdateNNUMixtureParameter``2(System.Collections.Generic.List{PNNLOmics.Data.Features.FeatureMatch{``0,``1}},System.Double,System.Collections.Generic.List{System.Double})">
            <summary>
            Update the mixture proportion for the normal-normal-uniform mixture model.
            </summary>
            <typeparam name="T">The type of the observed feature.  Derived from Feature.</typeparam>
            <param name="featureMatchList">List of FeatureMatches to evaluate at.</param>
            <param name="uniformDensity">Density of uniform distribution.</param>
            <param name="alphaList">List to be filled with individual mixture values.</param>
            <returns>The updated mixture proportion.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.ComputeSTACMassTag``1(PNNLOmics.Data.Features.FeatureMatch{``0,PNNLOmics.Data.MassTag},System.Double,System.Boolean,System.Boolean)">
            <summary>
            Overload function to calculate STAC score for MassTag target data.
            </summary>
            <typeparam name="T">The type of the observed feature.  Derived from Feature.</typeparam>
            <param name="featureMatchList">List of FeatureMatches to train data on.</param>
            <param name="uniformDensity">Density of uniform distribution.</param>
            <param name="useDriftTime">Whether to use drift times in the calculations.</param>
            <param name="usePrior">Whether to use prior probabilities in the calculation of the STAC score.</param>
            <returns>The STAC score corresponding to featureMatch.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.ComputeSTACFeature``2(PNNLOmics.Data.Features.FeatureMatch{``0,``1},System.Double,System.Boolean,System.Boolean)">
            <summary>
            Function to calculate STAC score.
            </summary>
            <typeparam name="T">Observed feature to be matched.  Derived from Feature.  Usually UMC or UMCCluster.</typeparam>
            <typeparam name="U">Feature to be matched to.  Derived from Feature.  Usually AMTTag.</typeparam>
            <param name="featureMatchList">List of FeatureMatches to train data on.</param>
            <param name="uniformDensity">Density of uniform distribution.</param>
            <param name="useDriftTime">Whether to use drift times in the calculations.</param>
            <param name="usePrior">Whether to use prior probabilities in the calculation of the STAC score.</param>
            <returns>The STAC score corresponding to featureMatch.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.BetaDensity(System.Double,System.Double)">
            <summary>
            Compute the density of the Beta distribution as the marginal of a Dirichlet distribution for computation of the STAC Specificity.
            </summary>
            <param name="STAC">The STAC score at which to evaluate the density.</param>
            <param name="alpha">The first parameter of the Beta distribution.  The second parameter is assumed to be (1-alpha).</param>
            <returns>The density of the Beta distribution evaluated at STAC.</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.ReportDebug(System.String)">
            <summary>
            Report detailed debugging information using OnDebugEvent
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.ReportError(System.String)">
            <summary>
            Report an error message using OnErrorMessage
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.ReportMessage(System.String)">
            <summary>
            Report a progress message using OnMessage
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.MixtureProportion">
            <summary>
            Gets or sets the mixture proportion, i.e. the probability of being from the correct distribution.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.MeanVectorT">
            <summary>
            Gets or sets the estimated means of the true normal distribution.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.CovarianceMatrixT">
            <summary>
            Gets or sets the estimated covariance matrix of the true normal distribution.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.MeanVectorF">
            <summary>
            Gets or sets the mean vector of the normal distribution used in the case of a low prior probability.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.CovarianceMatrixF">
            <summary>
            Gets or sets the covariance matrix of the normal distribution used in the case of a low prior probability.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.STACInformation.RefinedTolerances">
            <summary>
            Gets or sets the the refined tolerances calculated during STAC training.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.Libraries.AminoAcidLibrary">
            <summary>
            Sets up the amino acid compound library and calculates its monoisotopic masses from its elemental composition
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Constants.Libraries.AminoAcidLibrary.LoadLibrary">
            <summary>
            This designed to create amino acids objects from the elements.
            The amino acids are added to a Dictionary searchable by char keys such as 'A' for Alanine.
            This is the only library with char keys.
            </summary>		
        </member>
        <member name="T:PNNLOmics.Data.Constants.UserUnitName">
            <summary>
            User unit.  A general place holder for user input
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.Libraries.UserUnitLibrary">
            <summary>
            This is a Class designed to allow for users to add data not in any library
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Constants.Libraries.UserUnitLibrary.LoadLibrary">
            <summary>
            Loads the information from the const section into a user specified library
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Constants.Libraries.UserUnitLibrary.SetLibrary(PNNLOmics.Data.Constants.UserUnit)">
            <summary>
            Creates a UserUnitLibrary from Usernits so that it can be stored as a singleton with Constants.SetUserUnitLibrary(myLibrary);
            UserUnit.Symbol must be defined and UserUnit.UserUnitType (which is the UserUnitName)
            </summary>
            <param name="user1"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Data.Constants.Libraries.UserUnitLibrary.SetLibrary(PNNLOmics.Data.Constants.UserUnit,PNNLOmics.Data.Constants.UserUnit)">
            <summary>
            Creates a UserUnitLibrary from Usernits so that it can be stored as a singleton with Constants.SetUserUnitLibrary(myLibrary);
            UserUnit.Symbol must be defined and UserUnit.UserUnitType (which is the UserUnitName)
            </summary>
            <param name="user1"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Data.Constants.Libraries.UserUnitLibrary.SetLibrary(PNNLOmics.Data.Constants.UserUnit,PNNLOmics.Data.Constants.UserUnit,PNNLOmics.Data.Constants.UserUnit)">
            <summary>
            Creates a UserUnitLibrary from Usernits so that it can be stored as a singleton with Constants.SetUserUnitLibrary(myLibrary);
            UserUnit.Symbol must be defined and UserUnit.UserUnitType (which is the UserUnitName)
            </summary>
            <param name="user1"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.MSFeatureSingleLinkageClustering`2.Cluster(System.Collections.Generic.List{`0})">
            <summary>
            Finds LCMS Features from MS Features.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:PNNLOmics.Data.Features.UMCLight">
            <summary>
            Representation of a UMC with only basic information
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Features.IFeatureCluster`1">
            <summary>
            
            </summary>
            <typeparam name="T">child features</typeparam>
            <typeparam name="U">parent features</typeparam>
        </member>
        <member name="M:PNNLOmics.Data.Features.IFeatureCluster`1.AddChildFeature(`0)">
            <summary>
            Adds a child feature the list of aggregate features.
            </summary>
            <param name="feature"></param>
        </member>
        <member name="M:PNNLOmics.Data.Features.IFeatureCluster`1.CalculateStatistics(PNNLOmics.Data.Features.ClusterCentroidRepresentation)">
            <summary>
            Calcualte the statistics for the given cluster.
            </summary>
            <param name="centroid"></param>
        </member>
        <member name="P:PNNLOmics.Data.Features.IFeatureCluster`1.Features">
            <summary>
            Gets a list of child features.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.UMCLight.DEFAULT_GROUP_ID">
            <summary>
            Default group ID.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCLight.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCLight.ToString">
            <summary>
            Returns a basic string representation of the cluster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCLight.Equals(System.Object)">
            <summary>
            Compares two objects' values to each other.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if similar, False if not.</returns>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCLight.GetHashCode">
            <summary>
            Computes a hash code for the cluster.
            </summary>
            <returns>Hashcode as an integer.</returns>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCLight.Clear">
            <summary>
            Clears the UMC and sets it to its default state.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCLight.CalculateStatistics(PNNLOmics.Data.Features.ClusterCentroidRepresentation)">
            <summary>
            Calculates the centroid and other statistics about the cluster.
            </summary>
            <param name="centroid"></param>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMCLight.UMCCluster">
            <summary>
            Gets or sets the UMC Cluster this feature is part of.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMCLight.MSFeatures">
            <summary>
            Gets or sets the list of MS features for the given UMC.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMCLight.ScanStart">
            <summary>
            Gets or sets the first scan number the feature was seen in.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMCLight.ScanEnd">
            <summary>
            Gets or sets the last scan number the feature was seen in.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMCLight.Scan">
            <summary>
            Gets or sets the scan for the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMCLight.AbundanceSum">
            <summary>
            Gets or sets the sum of abundances from all MS features
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMCLight.HPositive">
            <summary>
            Gets or sets the value of the trailing width of the SIC profile based on charge state.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMCLight.HNegative">
            <summary>
            Gets or sets the value of the leading width of the SIC profile based on charge state.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.Element">
            <summary>
            This is a Class designed to inherit from matter and detail the information for elements from the periodic table.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Element.MassAverage">
            <summary>
            Average mass from IUPAC 2007.  This is not the calculated one
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Element.MassAverageUncertainty">
            <summary>
            Average mass uncertainty in Da from IUPAC 2007
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Element.IsotopeDictionary">
            <summary>
            dictionary containing all known isotopes from an element
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.Libraries.MonosaccharideLibrary">
            <summary>
            Sets up the monosaccharide compound library and calculates its monoisotopic masses from its elemental composition
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Constants.Libraries.MonosaccharideLibrary.LoadLibrary">
            <summary>
            This is a Class designed to create Compound objects from the elements.
            The monosacchadies are added to a Dictionary searchable by string keys such as "DxyHex" for Deoxyhexose
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MassTags.MassTagLight.PeptideSequence">
            <summary>
            Gets or sets the peptide sequence. Breaking the model!
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MassTags.MassTagLight.PeptideSequenceEx">
            <summary>
            Gets or sets the peptide sequence. Breaking the model!
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MassTags.MassTagLight.DiscriminantMax">
            <summary>
            Gets or sets the discriminant score.  ???
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MassTags.MassTagLight.PriorProbability">
            <summary>
            Gets or sets the prior probability value.  This was previously
            peptide prophet probability, or EPIC.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.LevenburgMarquadtSolver.Solve(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Double[]@)">
            <summary>
            Least squares solver 
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="coeffs">Guess at coefficients</param>
            <returns>True if solved, False if error</returns>
        </member>
        <member name="P:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.LevenburgMarquadtSolver.DifferentialStep">
            <summary>
            Gets or sets the amount to step when differentiating.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.LevenburgMarquadtSolver.BasisFunction">
            <summary>
            Gets or sets the basis function to call that the LM algorithm is solving for.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.LevenburgMarquadtSolver.Epsilon">
            <summary>
            Gets or sets the tolerance to know when the Least Squares has completed.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.SolverReport">
            <summary>
            Contains information about the Levenburg-Marquadt execution.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.SolverReport.#ctor(alglib.lsfitreport,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="report">Report from algorithm</param>
            <param name="didConverge"></param>
        </member>
        <member name="P:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.SolverReport.AverageError">
            <summary>
            Gets the average error.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.SolverReport.IterationCount">
            <summary>
            Gets the number of iterations the software took to converge.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.SolverReport.MaxError">
            <summary>
            Gets the maximum error 
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.SolverReport.RmsError">
            <summary>
            Gets the RMS value
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.SolverReport.WeightedRmsError">
            <summary>
            Gets the weighted RMS value 
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.SolverReport.PerPointNoise">
            <summary>
            Gets the noise per point.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.SolverReport.DidConverge">
            <summary>
            Gets the flag indicating whether the algorithm converged.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.SolverReport.RSquared">
            <summary>
            Gets the R-squared value for the fit.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Peptide">
            <summary>
            This class encapsulates peptide level information.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Molecule.Scan">
            <summary>
            Gets or sets the scan the molecule was identified in.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Molecule.MassMonoisotopic">
            <summary>
            Gets the moleculare Weight
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Molecule.Spectrum">
            <summary>
            Gets or sets the spectrum that identified the molecule.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Alignment.SimilarityScore`2">
            <summary>
            Encapsulates the similarity scoring algorithm for scoring matches between
            sections of an alignee and reference dataset
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.SimilarityScore`2.#ctor(PNNLOmics.Algorithms.Alignment.AlignmentDataset{`0},PNNLOmics.Algorithms.Alignment.AlignmentDataset{`1},System.Int32)">
            <summary>
            Initializes a new instance of SimilarityScore
            </summary>
            <param name="aligneeDataset"></param>
            <param name="referenceDataset"></param>
            <param name="matchCriteria"></param>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.SimilarityScore`2.RecalculateScore(System.Int32)">
            <summary>
            Recalculates the similarity score cube between the alignee and
            reference dataset based on a new expansion factor
            </summary>
            <param name="expansionFactor">New expansion factor</param>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.SimilarityScore`2.ValueAtLocation(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="aligneeSection"></param>
            <param name="referenceSection"></param>
            <param name="expansionFactor"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.SimilarityScore`2.CalculateMatchScore(System.Collections.Generic.List{PNNLOmics.Generic.Pair{`0,`1}})">
            <summary>
            Calculates a score for the provided matched alignment features.
            </summary>
            <param name="matchedFeatures">A list of matched features from the alignee
            and reference datasets</param>
            <returns>The score for this set of matches</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.SimilarityScore`2.GenerateSectionMatches(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a list of feature matches between a section from the alignee dataset
            and the reference dataset
            </summary>
            <param name="aligneeSection"></param>
            <param name="referenceSection"></param>
            <param name="expansionFactor"></param>
            <returns></returns>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.SimilarityScore`2.StandardDeviationNET">
            <summary>
            Gets or sets the standard deviation for the NET
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.SimilarityScore`2.ToleranceNET">
            <summary>
            Gets or sets the NET tolerance used when calculating section matches
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.SimilarityScore`2.StandardDeviationMass">
            <summary>
            Gets or sets the standard deviation for the mass
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.SimilarityScore`2.ToleranceMass">
            <summary>
            Gets or sets the mass tolerance used when calculating section matches
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.SimilarityScore`2.ScoreCube">
            <summary>
            Gets the similarity scores between the alignee and reference datasets
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Constants.Isotope.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            This is a Class designed to contain the information on the natural abundance of heavy isotopes on earth.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctions.OrbitrapFunction.FunctionDelegate(System.Double[],System.Double[],System.Double@,System.Object)">
            <summary>
            Evalutates the second order chebyshev polynomials
            </summary>
            <param name="c">Set of coefficients</param>
            <param name="x">Input variables</param>
            <param name="functionResult">Returned sum value of your function</param>
            <param name="obj">?</param>
        </member>
        <member name="T:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctions.Gaussian">
            <summary>
            Basis function for the LM Algorithm using Gaussian Peak Shapes
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctions.Gaussian.FunctionDelegate(System.Double[],System.Double[],System.Double@,System.Object)">
            <summary>
            Evalutates the second order chebyshev polynomials
            </summary>
            <param name="c">Set of coefficients</param>
            <param name="x">Input variables</param>
            <param name="functionResult">Returned sum value of your function</param>
            <param name="obj">?</param>
        </member>
        <member name="T:PNNLOmics.Algorithms.FeatureMatcher.PeakMatcherOptions">
            <summary>
            Options class for matching AMT's to features
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.PeakMatcherOptions.#ctor">
            <summary>
            constructor.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.PeakMatcherOptions.Tolerances">
            <summary>
            Gets or sets the feature tolerances for matching AMT's to features.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.PeakMatcherOptions.DaltonShift">
            <summary>
            Gets or sets the amount to shift (in daltons) when doing the peak matching.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Distance.EuclideanDistanceMetric`1.EuclideanDistance(`0,`0)">
            <summary>
            Calculates the Euclidean distance based on drift time, aligned mass, and aligned NET.
            </summary>
            <param name="x">Feature x.</param>
            <param name="y">Feature y.</param>
            <returns>Distance calculated as </returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Distance.EuclideanDistanceMetric`1.EuclideanDistance(`0,`0,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the weighted Euclidean distance based on drift time, aligned mass, and aligned NET.
            </summary>
            <param name="x">Feature x.</param>
            <param name="y">Feature y.</param>
            <returns>Distance calculated as </returns>
        </member>
        <member name="T:PNNLOmics.Data.Protein">
            <summary>
            Class that holds information about a protein.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Protein.Clear">
            <summary>
            Clears the 
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Protein.Sequence">
            <summary>
            Gets or sets the protein sequence of amino acids.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Protein.RefID">
            <summary>
            Gets or sets the reference ID
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Protein.ProteinID">
            <summary>
            Gets or sets the protein ID
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Metabolite">
            <summary>
            Class that holds information about a protein.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Metabolite.Clear">
            <summary>
            Clears the 
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MassTag.PeptideSequence">
            <summary>
            Gets or sets the peptide sequence. Breaking the model!
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MassTag.PeptideSequenceEx">
            <summary>
            Gets or sets the peptide sequence. Breaking the model!
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MassTag.DiscriminantMax">
            <summary>
            Gets or sets the discriminant score.  ???
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MassTag.PriorProbability">
            <summary>
            Gets or sets the prior probability value.  This was previously
            peptide prophet probability, or EPIC.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Features.MSFeature">
            <summary>
            MS Feature class that describes a raw or deisotoped feature.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Features.MSFeatureLight">
            <summary>
            MS Feature class that describes a raw or deisotoped feature.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.MSFeatureLight.Clear">
            <summary>
            Clears the datatype and resets the raw values to their default values.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.MSFeatureLight.CompareTo(PNNLOmics.Data.Features.MSFeatureLight)">
            <summary>
            Default Comparer used for the MSFeature class. Sorts by Monoisotopic Mass descending.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.MSFeatureLight.ScanIMSComparison">
            <summary>
            Compares the IMS Scan of two MS Features
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:PNNLOmics.Data.Features.MSFeatureLight.MSPeakList" -->
        <member name="P:PNNLOmics.Data.Features.MSFeatureLight.UMC">
            <summary>
            The UMC associated with this MS Feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeatureLight.Mz">
            <summary>
            Gets or sets the mass to charge ratio value.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeatureLight.Scan">
            <summary>
            Gets or sets the scan of the feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeatureLight.MassMonoisotopicAverage">
            <summary>
            Gets or sets the average monoisotopic mass. 
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeatureLight.MassMonoisotopicMostAbundant">
            <summary>
            Gets or sets the most abundant monoisotopic mass from the isotopic distribution.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeatureLight.MSnSpectra">
            <summary>
            Gets or sets the list of potential MS/MS (MSn) spectra associated with this feature.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.MSFeature.Clear">
            <summary>
            Clears the datatype and resets the raw values to their default values.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.MSFeature.CompareTo(PNNLOmics.Data.Features.MSFeature)">
            <summary>
            Default Comparer used for the MSFeature class. Sorts by Monoisotopic Mass descending.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeature.IndexInFile">
            <summary>
            The index location (row #) of the MSFeature in the input file.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeature.AbundanceMono">
            <summary>
            The abundance of the monisotopic peak of the MSFeature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeature.AbundancePlus2">
            <summary>
            The monoisotopic abundance plus2 of the MSFeature.
            </summary>        
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeature.ScanIMS">
            <summary>
            The IMS Scan of the MSFeature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeature.MassOffset">
            <summary>
            The magnitude of Mass Correction of the MSFeature measured in Daltons.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeature.MassMostAbundant">
            <summary>
            The mass of the most abundant Peak of the MS Feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeature.Fit">
            <summary>
            The fit value of the MSFeature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeature.Fwhm">
            <summary>
            The Full-width-half-max value of the MSFeature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeature.SignalToNoiseRatio">
            <summary>
            The Signal-to-noise ratio of the most abundant peak of the MSFeature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeature.IntensityOriginal">
            <summary>
            The Original Intensity of the MSFeature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeature.IntensityOriginalTIA">
            <summary>
            The Original TIA Intensity of the MSFeature.
            </summary>      
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeature.MSMSFragmentation">
            <summary>
            Gets or sets the child fragmentation spectra if it was acquired.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.MSFeature.MZ">
            <summary>
            Gets or sets the mass to charge ratio.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.AMTTagDatabase.m_moleculeSpectrumSourceList">
            <summary>
            PSM
            </summary>
        </member>
        <member name="T:PNNLOmics.Generic.Pair`2">
            <summary>
            Container class that stores a generic pair of objects
            </summary>
            <typeparam name="T">Type of the first object in the Pair</typeparam>
            <typeparam name="U">Type of the second object in the Pair</typeparam>
        </member>
        <member name="M:PNNLOmics.Generic.Pair`2.#ctor">
            <summary>
            Initializes a new instance of Pair with both objects set to default
            </summary>
        </member>
        <member name="M:PNNLOmics.Generic.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of Pair with the provided objects
            </summary>
            <param name="first">The first object of the Pair</param>
            <param name="second">The second object of the Pair</param>
        </member>
        <member name="P:PNNLOmics.Generic.Pair`2.First">
            <summary>
            Gets or sets the first object in the Pair
            </summary>
        </member>
        <member name="P:PNNLOmics.Generic.Pair`2.Second">
            <summary>
            Gets or sets the second object in the Pair
            </summary>
        </member>
        <member name="M:PNNLOmics.Extensions.FeatureListExtensions.ExtendedScanRange(System.Collections.Generic.List{PNNLOmics.Data.Features.MSFeatureLight},System.Double)">
            <summary>
            Determines the magnitude of the scan range beyond what is defined by the MSFeatures min and max scan based on percentage of total range. 
            </summary>
            <param name="features"></param>
            <param name="percentage"></param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Extensions.XYDataListExtensions.FindByMZ(System.Collections.Generic.List{PNNLOmics.Data.XYData},System.Double)">
            <summary>
            Finds the closest matching XY data value based on mz assumes list is sorted in ascending order.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:PNNLOmics.Data.PairwiseDistance`1">
            <summary>
            Holds the distance between two features and indices.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.PairwiseDistance`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.PairwiseDistance`1.#ctor(`0,`0,System.Double)">
            <summary>
            Constructor that builds a distance between two features.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="distance"></param>
        </member>
        <member name="M:PNNLOmics.Data.PairwiseDistance`1.Compare(PNNLOmics.Data.PairwiseDistance{`0},PNNLOmics.Data.PairwiseDistance{`0})">
            <summary>
            Compares the distance between x and y.
            </summary>
            <param name="x">Feature x.</param>
            <param name="y">Feature y.</param>
            <returns>Returns an integer value determining if x is greater than, less than, or equal to y.</returns>
        </member>
        <member name="P:PNNLOmics.Data.PairwiseDistance`1.FeatureX">
            <summary>
            Gets or sets the x feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.PairwiseDistance`1.FeatureY">
            <summary>
            Gets or sets the y feature.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.PairwiseDistance`1.Distance">
            <summary>
            Gets or sets the distance between the two features.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Features.UMCClusterLight">
            <summary>
            Basic representation of a group of UMC's observed across datasets.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCClusterLight.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCClusterLight.#ctor(PNNLOmics.Data.Features.UMCLight)">
            <summary>
            Creates a UMC Cluster from the umc, while also connecting them together.
            </summary>
            <param name="cluster"></param>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCClusterLight.#ctor(PNNLOmics.Data.Features.UMCClusterLight)">
            <summary>
            Copy constructor. 
            </summary>
            <param name="cluster"></param>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCClusterLight.CalculateStatistics(PNNLOmics.Data.Features.ClusterCentroidRepresentation)">
            <summary>
            Calculates the centroid and other statistics about the cluster.
            </summary>
            <param name="centroid"></param>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCClusterLight.Equals(System.Object)">
            <summary>
            Compares two objects' values to each other.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if similar, False if not.</returns>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCClusterLight.GetHashCode">
            <summary>
            Computes a hash code for the cluster.
            </summary>
            <returns>Hashcode as an integer.</returns>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCClusterLight.Clear">
            <summary>
            Resets the object to it's default values.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMCClusterLight.UMCList">
            <summary>
            Gets or sets the list of UMC's that comprise this cluster.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Chromatogram">
            <summary>
            Chromatogram for a given m/z holding X scan.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.PeakDetection.InstrumentDataNoiseType">
            <summary>
            Has the noise been removed from the data prior.  Orbitrap data has the noise removed.
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.PeakDetection.InstrumentDataNoiseType.Standard">
            <summary>
            noise has not been removed
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.PeakDetection.InstrumentDataNoiseType.NoiseRemoved">
            <summary>
            noise has ben thresholded away prior, such as orbitrap
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.PeakDetection.PeakFitType">
            <summary>
            options for fitting to the top three peak top points
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.PeakDetection.PeakFitType.Parabola">
            <summary>
            //uses the parabola fit directly to find the apex and centroid
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.PeakDetection.PeakFitType.Lorentzian">
            <summary>
            //takes the log first and then uses the parabola fit to find the apex and centroid
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.FeatureClustering.MSFeatureClusterParameters`1">
            <summary>
            Options for MS feature clustering.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PNNLOmics.Algorithms.FeatureClustering.FeatureClusterParameters`1">
            <summary>
            Parameters for the single linkage UMC Clustering Algorithm.
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.FeatureClustering.FeatureClusterParameters`1.CONST_DEFAULT_ONLY_CLUSTER_SAME_CHARGE_STATES">
            <summary>
            Default value whether to separate UMC's based on charge state information.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.FeatureClusterParameters`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.FeatureClusterParameters`1.Clear">
            <summary>
            Resets the parameters to their default values.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.FeatureClusterParameters`1.WithinRange(`0,`0)">
            <summary>
            Computes the mass difference between two features.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.FeatureClusterParameters`1.Tolerances">
            <summary>
            Gets or sets the tolerance values for the clustering algorithm.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.FeatureClusterParameters`1.OnlyClusterSameChargeStates">
            <summary>
            Gets or sets whether to separate features based on charge state.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.FeatureClusterParameters`1.DistanceFunction">
            <summary>
            Gets or sets the distance function to use for calculating the distance between two UMC's.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.FeatureClusterParameters`1.RangeFunction">
            <summary>
            Gets or sets the function that determines if two features are within range of each other.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.MSFeatureClusterParameters`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.MSFeatureClusterParameters`1.Clear">
            <summary>
            Sets the internal values to their default state.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSFeatureClusterParameters`1.RetentionTimeWeight">
            <summary>
            Gets or sets the retention time weight.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSFeatureClusterParameters`1.DriftTimeWeight">
            <summary>
            Gets or sets the drift time weight to use.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSFeatureClusterParameters`1.AbundanceLogWeight">
            <summary>
            Gets or sets the log abundance weight 
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSFeatureClusterParameters`1.ScanWeight">
            <summary>
            Gets or sets the scan weight to use.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSFeatureClusterParameters`1.FitWeight">
            <summary>
            Gets or sets the fit or score weight to use when calculating 
            distance between two features.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSFeatureClusterParameters`1.MassMonoisotopicWeight">
            <summary>
            Gets or sets the mono mass weight. 
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSFeatureClusterParameters`1.MassMonoisotopicAverageConstraint">
            <summary>
            Gets or sets the mass constraint for 
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSFeatureClusterParameters`1.MassMonoisotopicAverageWeight">
            <summary>
            Gets or sets the monoisotopic mass average weight.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSFeatureClusterParameters`1.MaxDistance">
            <summary>
            Gets or sets the maximum distance to use.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSFeatureClusterParameters`1.UseNET">
            <summary>
            Gets or sets whether to convert scans into a generic NET value based on the min and max scan.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSFeatureClusterParameters`1.ScanMinimum">
            <summary>
            Gets or sets the scane minimum of the feature cloud.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSFeatureClusterParameters`1.ScanMaximum">
            <summary>
            Gets or sets the scan maximum of the feature cloud.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Alignment.NumericValues">
            <summary>
            This class is simply a container for numeric values used in the alignment library
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.NumericValues.DefaultNETStandardDeviation">
            <summary>
            Gets the default NET standard deviation
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.NumericValues.DefaultNETTolerance">
            <summary>
            Gets the default NET tolerance level
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.NumericValues.DefaultMassStandardDeviation">
            <summary>
            Gets the default mass standard deviation
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.NumericValues.DefaultMassTolerance">
            <summary>
            Gets the default mass tolerance level
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.NumericValues.OneMillionth">
            <summary>
            Represents (1 / 1,000,000)
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.FeatureMatch`2.#ctor">
            <summary>
            Parameterless constructor.  Must use AddFeatures function before attempting to use match.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.FeatureMatch`2.#ctor(`0,`1,System.Boolean,System.Boolean)">
            <summary>
            Constructor that takes in all necessary information.
            </summary>
            <param name="observedFeature">Feature observed in experiment.  Typically a UMC or UMCCluster.</param>
            <param name="targetFeature">Feature to match to.  Typically an AMTTag.</param>
            <param name="useDriftTime">Whether to use the drift time in distance vectors.</param>
            <param name="shiftedMatch">Whether the match is the result of a fixed shift.</param>
        </member>
        <member name="F:PNNLOmics.Data.Features.FeatureMatch`2.FeatureComparison">
            <summary>
            Comparison function for sorting by feature ID.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.FeatureMatch`2.STACComparison">
            <summary>
            Comparison function for sorting by STAC score.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.FeatureMatch`2.STACComparisonDescending">
            <summary>
            Comparison function for sorting by STAC score descending.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.FeatureMatch`2.SetFlags(System.Boolean)">
            <summary>
            Sets internal flag as to whether drift time or predicted drift time is used.
            </summary>
            <param name="useDriftTime"></param>
        </member>
        <member name="M:PNNLOmics.Data.Features.FeatureMatch`2.Clear">
            <summary>
            Resets all member variables to default values.  Must use AddFeatures to add features after use.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.FeatureMatch`2.AddFeatures(`0,`1,System.Boolean,System.Boolean)">
            <summary>
            Add (or replace) features in a match.
            </summary>
            <param name="observedFeature">Feature observed in experiment.  Typically a UMC or UMCCluster.</param>
            <param name="targetFeature">Feature to match to.  Typically an AMTTag.</param>
            <param name="useDriftTime">Whether to use the drift time in distance vectors.</param>
            <param name="shiftedMatch">Whether the match is the result of a fixed shift.</param>
        </member>
        <member name="M:PNNLOmics.Data.Features.FeatureMatch`2.InRegion(PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherTolerances,System.Boolean)">
            <summary>
            Sets the internal flag as to whether the match is within the given tolerances.
            </summary>
            <param name="tolerances">Tolerances to use for matching.</param>
            <param name="useElllipsoid">Whether to use ellipsoidal region for matching.</param>
            <returns></returns>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureMatch`2.UseDriftTimePredicted">
            <summary>
            Gets whether the drift time provided was predicted.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureMatch`2.WithinRefinedRegion">
            <summary>
            Gets or sets whether the match was within the refined region.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureMatch`2.ShiftedMatch">
            <summary>
            Gets or sets whether the match is a shifted match.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureMatch`2.STACScore">
            <summary>
            Gets or sets the STAC score for the match.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureMatch`2.STACSpecificity">
            <summary>
            Gets or sets the STAC Specificity of the match.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureMatch`2.SLiCScore">
            <summary>
            Gets or sets the SLiC score for the match.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureMatch`2.DelSLiC">
            <summary>
            Gets or sets the delSLiC for the match.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureMatch`2.DifferenceVector">
            <summary>
            Gets the difference vector between the matched features.  This includes both observed and predicted drift times where appropriate.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureMatch`2.ReducedDifferenceVector">
            <summary>
            Gets the distance matrix with only applicable dimensions.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureMatch`2.ObservedFeature">
            <summary>
            Gets the observed feature, i.e. the feature seen in the analysis.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Features.FeatureMatch`2.TargetFeature">
            <summary>
            Gets the target feature, i.e. the feature that was matched to.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.ScanSummary">
            <summary>
            Encapsulates MS Spectrum summary information (e.g. BPI, # of peaks, TIC)
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ScanSummary.Bpi">
            <summary>
            Gets or sets the base peak intensity
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ScanSummary.BpiMz">
            <summary>
            Gets or sets the base peak m/z value.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ScanSummary.MSLevel">
            <summary>
            Gets or sets the MS level (1, 2, ..., n).
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ScanSummary.Time">
            <summary>
            Gets or sets the scan time in seconds.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ScanSummary.Scan">
            <summary>
            Gets or sets the scan number.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ScanSummary.Tic">
            <summary>
            Gets or sets the total ion current of the scan.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ScanSummary.NumberOfPeaks">
            <summary>
            Gets or sets the number of peaks.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ScanSummary.NumberOfDeisotoped">
            <summary>
            Gets or sets the number of deisotoped features.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.Libraries.SubAtomicParticleLibrary">
            <summary>
            This is a Class designed to convert tabulated data into a atom objects which are similar to physical constants.
            Electron, Neutron and Protons are created here and added to a Dictionarty with string keys such as "e" for electron
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Constants.Libraries.SubAtomicParticleLibrary.LoadLibrary">
            <summary>
            Loads the information from the const section into a sub atomics particle library
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.Libraries.CrossRingLibrary">
            <summary>
            Sets up the cross ring compound library and calculates its monoisotopic masses from its elemental composition
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Constants.Libraries.CrossRingLibrary.LoadLibrary">
            <summary>
            This is a Class designed to create cross ring fragments objects of monosaccharides from the elements.
            The cross ring fragments are added to a Dictionary searchable with string keys such as "CRFNeu5Ac_02_X1" for the 
            X1 cross ring fragment which breaks across the 0 and 2 ring bonds of a Neuraminic acid monosachcaride
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.ProcessedPeak.ToPeaks(System.Collections.Generic.List{PNNLOmics.Data.ProcessedPeak})">
            <summary>
            Peak is the standard object for the output collection and we need to convert processed peak lists.  
            </summary>
            <param name="processedPeakList">list of processed peaks</param>
            <returns>list of peaks</returns>
        </member>
        <member name="P:PNNLOmics.Data.ProcessedPeak.LocalLowestMinimaHeight">
            <summary>
            the lower of the two local minima (lowest between the minima lower in mass and the minima higher in mass)
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ProcessedPeak.MinimaOfLowerMassIndex">
            <summary>
            the closes minima on the lower mass side of the peak has this index.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ProcessedPeak.MinimaOfHigherMassIndex">
            <summary>
            the closes minima on the higher mass side of the peak has this index.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ProcessedPeak.SignalToNoiseGlobal">
            <summary>
            Maxintensity/noise threshold (Xsigma above the average noise)
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ProcessedPeak.SignalToNoiseLocalMinima">
            <summary>
            Maxintensity/local lowest minima
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ProcessedPeak.SignalToBackground">
            <summary>
            Maxintensity/average of local minima
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ProcessedPeak.Charge">
            <summary>
            Charge state based on nearby peaks
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.ProcessedPeak.ScanNumber">
            <summary>
            the Scan Number this peak was found in.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Statistics.WilcoxonSignedRankTest">
            <summary>
            Performs the Wilcoxon Signed Rank Test
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Statistics.WilcoxonSignedRankTest.ComputePValue(System.Collections.Generic.List{System.Double})">
            <summary>
            Computes a p-value for a given distribution.
            </summary>
            <param name="distribution">Values used to compute the p-value.</param>
            <returns>Level of significance (p-value)</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Statistics.WilcoxonSignedRankTest.ComputeLevelOfSignifance(System.Double,System.Int32)">
            <summary>
            Computes the level of significance (p-value) for the largest magnitude.
            http://www.fon.hum.uva.nl/Service/Statistics/Signed_Rank_Algorihms.html
            </summary>
            <param name="wInput">Largest observed w (magnitude of test)</param>
            <param name="numberOfObservations">Total number of observations that were made</param>
            <returns>p-value indicating level of significance</returns>
        </member>
        <member name="T:PNNLOmics.Algorithms.Distance.PearsonCorrelation">
            <summary>
            Class to calculate Pearson Product-Moment Correlation
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Distance.PearsonCorrelation.#ctor">
            <summary>
            General Constructor
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Distance.PearsonCorrelation.Pearson(System.Double[],System.Double[])">
            <summary>
            Calculates the Pearson Product-Moment Correlation Coefficient (r)
            </summary>
            <param name="x">vector or array</param>
            <param name="y">vector or array</param>
            <returns>True, if the function completes successfully</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Distance.PearsonCorrelation.Pearson(System.Collections.Generic.List{PNNLOmics.Data.XYData},System.Collections.Generic.List{PNNLOmics.Data.XYData})">
            <summary>
            Calculates the Pearson Product-Moment Correlation Coefficient (r) on Y values from Lists of XYData
            </summary>
            <param name="x">vector or array</param>
            <param name="y">vector or array</param>
            <returns>True, if the function completes successfully</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Distance.PearsonCorrelation.Pearson(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Calculates the Pearson Product-Moment Correlation Coefficient (r)
            </summary>
            <param name="x">vector or array</param>
            <param name="y">vector or array</param>
            <returns>True, if the function completes successfully</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Distance.PearsonCorrelation.Pearson(System.Single[],System.Single[])">
            <summary>
            Calculates the Pearson Product-Moment Correlation Coefficient (r)
            </summary>
            <param name="x">vector or array</param>
            <param name="y">vector or array</param>
            <returns>True, if the function completes successfully</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Distance.PearsonCorrelation.Pearson(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Single})">
            <summary>
            Calculates the Pearson Product-Moment Correlation Coefficient (r)
            </summary>
            <param name="x">vector or array</param>
            <param name="y">vector or array</param>
            <returns>True, if the function completes successfully</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Distance.PearsonCorrelation.Pearson(System.Int32[],System.Int32[])">
            <summary>
            Calculates the Pearson Product-Moment Correlation Coefficient (r)
            </summary>
            <param name="x">vector or array</param>
            <param name="y">vector or array</param>
            <returns>True, if the function completes successfully</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Distance.PearsonCorrelation.Pearson(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Calculates the Pearson Product-Moment Correlation Coefficient (r)
            </summary>
            <param name="x">vector or array</param>
            <param name="y">vector or array</param>
            <returns>True, if the function completes successfully</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Distance.PearsonCorrelation.CheckVectors(System.Double[],System.Double[])">
            <summary>
            Checks that the two vectors are of equal length, and that there are
            more than 3 elements in the vector or array.
            </summary>
            <param name="x">vector or array</param>
            <param name="y">vector or array</param>
            <returns>True, if the parameters are correct for correlation</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.Distance.PearsonCorrelation.WriteOutResultsToConsole">
            <summary>
            Generic method to write results to console, including r, R^2, and p-value
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Distance.PearsonCorrelation.r">
            <summary>
            Pearson correlation coefficient
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Distance.PearsonCorrelation.RSquared">
            <summary>
            Coefficient of Determination
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Distance.PearsonCorrelation.Pvalue">
            <summary>
            P-value of statistically significant correlation
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Distance.PearsonCorrelation.DegreesOfFreedom">
            <summary>
            Degrees of freedom for the study
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Alignment.DriftTimeAlignmentResults`2">
            <summary>
            Holds matches from drift time alignments.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.DriftTimeAlignmentResults`2.#ctor(System.Collections.Generic.List{PNNLOmics.Data.Features.FeatureMatch{`0,`1}},PNNLOmics.Algorithms.Alignment.LinearEquation)">
            <summary>
            Default constructor.
            </summary>
            <param name="matches"></param>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.DriftTimeAlignmentResults`2.Matches">
            <summary>
            Gets the matches made by the drift time alignment algorithm.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.DriftTimeAlignmentResults`2.AlignmentFunction">
            <summary>
            Gets the alignment function between the matches.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Alignment.AlignmentFunction`1">
            <summary>
            Alignment data between two datasets.
            </summary>
        </member>
        <member name="F:PNNLOmics.Algorithms.Alignment.AlignmentFunction`1.m_alignmentMatches">
            <summary>
            A list of alignment matches between two datasets.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.AlignmentFunction`1.#ctor(System.Collections.Generic.List{PNNLOmics.Algorithms.Alignment.AlignmentMatch})">
            <summary>
            Constructor.
            </summary>
            <param name="alignmentMatches">Matches found between two datasets.</param>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.AlignmentFunction`1.AlignDatasetNETs(PNNLOmics.Algorithms.Alignment.AlignmentDataset{`0})">
            <summary>
            Transforms the features stored in the alignment dataset into new features.
            </summary>
            <param name="features">Alignment dataset containing alignee features.</param>
            <returns>Transformed list of features.</returns>
        </member>
        <member name="T:PNNLOmics.Data.MSSpectra">
            <summary>
            Contains MSn data for a given parent m/z.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.MSSpectra.CONST_DEFAULT_MS_LEVEL">
            <summary>
            The default MSn level (MS/MS).
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.MSSpectra.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.MSSpectra.Clear">
            <summary>
            Resets the data to it's default state.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.MSSpectra.ToString">
            <summary>
            Returns a basic string representation of the cluster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Data.MSSpectra.Equals(System.Object)">
            <summary>
            Compares two objects' values.
            </summary>
            <param name="obj">Other to compare with.</param>
            <returns>True if values are the same, false if not.</returns>
        </member>
        <member name="M:PNNLOmics.Data.MSSpectra.GetHashCode">
            <summary>
            Generates a hash code.
            </summary>
            <returns>Hash code based on stored data.</returns>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.ID">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.RetentionTime">
            <summary>
            Gets or sets the retention time.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.Scan">
            <summary>
            Gets or sets the scan value for this spectra.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.GroupID">
            <summary>
            Gets or sets what group (or dataset) this spectra came from.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.PrecursorChargeState">
            <summary>
            Gets or sets the charge state for this spectra.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.MSLevel">
            <summary>
            Gets or sets the MS Level.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.BasePeak">
            <summary>
            Gets or sets the base peak.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.Peaks">
            <summary>
            Gets or sets the spectra for this MS level as x,y data points.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.PeaksProcessed">
            <summary>
            Gets or sets processed peaks asspcoated with this spectra.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.PeakProcessingLevel">
            <summary>
            The level to which the peaks have been processed
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.ChildSpectra">
            <summary>
            Gets or sets any n + 1 level MSn child spectra.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.ParentSpectra">
            <summary>
            Gets or sets the parent spectra if MSLevel > 2.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.CollisionType">
            <summary>
            Gets or sets the collision type.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.TotalIonCurrent">
            <summary>
            Gets or sets the total ion current.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.PrecursorMZ">
            <summary>
            Gets or sets the parent precursor M/Z for this MSn spectra.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.PrecursorPeak">
            <summary>
            Gets or sets the more accurate parent precursor M/Z for this MSn spectra.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.ScanMetaData">
            <summary>
            Gets or sets information about the scan from the instrument vendor's file.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.MSSpectra.Peptide">
            <summary>
            Gets or sets the peptide was associated with.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.CollisionType">
            <summary>
            Type of MS/MS fragmentation techniques.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.MonosaccharideName">
            <summary>
            Monosaccharides.  KDN is 2-keto-3-deoxy-D-glycero-D-galacto-nononic acid
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Alignment.LCMSWarp`2">
            <summary>
            Aligns two feature sets together.  Warping T onto U.
            </summary>
            <typeparam name="T">Alignee</typeparam>
            <typeparam name="U">Reference</typeparam>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.LCMSWarp`2.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="aligneeSegmentCount"></param>
            <param name="referenceSegmentCount"></param>
            <param name="expansionFactor"></param>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.LCMSWarp`2.PerformNETWarp(System.Collections.Generic.List{`0},System.Collections.Generic.List{`1})">
            <summary>
            Performs NET Warp between two features.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.LCMSWarp`2.Align(System.Collections.Generic.List{`0},System.Collections.Generic.List{`1})">
            <summary>
            
            </summary>
            <param name="aligneeFeatures"></param>
            <param name="referenceFeatures"></param>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.LCMSWarp`2.NormalizeElutionTimes(System.Collections.Generic.List{`0})">
            <summary>
            Normalizes the elution times for the list of features based on their scans.
            </summary>
            <param name="features">List of features to normalize.</param>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.LCMSWarp`2.AligneeSectionCount">
            <summary>
            Gets or sets the alignee section count.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.LCMSWarp`2.ReferenceSectionCount">
            <summary>
            Gets or sets the reference section count.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.LCMSWarp`2.ExpansionFactor">
            <summary>
            Get or sets the expansion factor.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.LCMSWarp`2.DiscontinuousNETSections">
            <summary>
            Gets or sets the total number of allowed discontinous NET sections.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.LCMSWarp`2.DiscontinousMassSections">
            <summary>
            Gets or sets the total number of allowed discontinous mass sections.
            </summary>
        </member>
        <member name="M:PNNLOmics.Utilities.MathUtilities.MultivariateNormalDensity(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>
            Finds the density of the n-variate normal distribution with mean meanVector and covariance structure covarianceMatrix 
            at the value xVector.
            </summary>
            <param name="xVector">Value at which the density is to be evaluated.  [n x 1]</param>
            <param name="meanVector">Mean vector for the density.  [n x 1]</param>
            <param name="covarianceMatrix">Symmetric covariance matrix.  [n x n]</param>
            <returns>Double</returns>
        </member>
        <member name="M:PNNLOmics.Utilities.MathUtilities.GetHistogramValues(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Finds the number of points in each bin of binWidth corresponding to a histogram of the values list.
            </summary>
            <param name="values">List of values to compute histogram counts for.</param>
            <param name="binWidth">Width of bins to use in computing histogram values.</param>
            <returns>List of XYData with X being midpoints of histogram bins and Y being count in the bin.</returns>
        </member>
        <member name="M:PNNLOmics.Utilities.MathUtilities.GetRelativeFrequencyHistogramValues(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Finds the relative frequency of points in each bin of binWidth corresponding to a histogram of the values list.
            </summary>
            <param name="values">List of values to compute histogram counts for.</param>
            <param name="binWidth">Width of bins to use in computing histogram values.</param>
            <returns>List of XYData with X being midpoints of histogram bins and Y being relative frequency in the bin.</returns>
        </member>
        <member name="M:PNNLOmics.Utilities.MathUtilities.XYDataListToArrays(System.Collections.Generic.List{PNNLOmics.Data.XYData},System.Double[],System.Double[])">
            <summary>
            Convert XYData to arrays to interact with other functions more easily.
            </summary>
            <param name="xyList">List of XYData values to be converted.</param>
            <param name="xArray">Array to be populated with X values.</param>
            <param name="yArray">Array to be populated with Y values.</param>
        </member>
        <member name="M:PNNLOmics.Utilities.MathUtilities.MassDifferenceInPPM(System.Double,System.Double)">
            <summary>
            Convert the difference between two masses to a difference in parts per million (PPM).
            </summary>
            <param name="mass1">First mass.  (Aligned mass of observedFeature)</param>
            <param name="mass2">Second mass.  (Aligned mass of targetFeature)</param>
            <returns></returns>
        </member>
        <member name="M:PNNLOmics.Utilities.MathUtilities.ValueToString(System.Double)">
            <summary>
            Convert value to a string with 5 digits of precision
            </summary>
            <param name="value">Number to convert to text</param>
            <returns>Number as text; numbers larger than 1000000 or smaller than 0.000001 will be in scientific notation</returns>
        </member>
        <member name="M:PNNLOmics.Utilities.MathUtilities.ValueToString(System.Double,System.Int32)">
            <summary>
            Convert value to a string with the specified digits of precision
            </summary>
            <param name="value">Number to convert to text</param>
            <param name="digitsOfPrecision">Total digits of precision (before and after the decimal point)</param>
            <returns>Number as text; numbers larger than 1000000 or smaller than 0.000001 will be in scientific notation</returns>
        </member>
        <member name="M:PNNLOmics.Utilities.MathUtilities.ValueToString(System.Double,System.Int32,System.Double)">
            <summary>
            Convert value to a string with the specified digits of precision and customized scientific notation threshold
            </summary>
            <param name="value">Number to convert to text</param>
            <param name="digitsOfPrecision">Total digits of precision (before and after the decimal point)</param>
            <param name="scientificNotationThreshold">Values larger than this threshold (positive or negative) will be converted to scientific notation</param>
            <returns>Number as text</returns>
        </member>
        <member name="M:PNNLOmics.Data.FormulaBuilder.AminoAcidFormulaBuilder.ConvertToMolecularFormula(System.String)">
            <summary>
            Converts an amino acid sequence into a molecular formula.  This does not include water or any other adduct.
            </summary>
            <param name="inputSequence"></param>
            <param name="chargeState"></param>
            <returns></returns>
        </member>
        <member name="T:PNNLOmics.Databases.SQLiteHandler">
            <summary>
            Wrapper class to make it easier to work with SQLite Databases 
            </summary>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.ConvertMS2SqliteDataType(System.String)">
            <summary>
            Converts Microsoft data types to SQLite data types
            </summary>
            <param name="MicrosoftDataType">Microsoft data type, e.g. "System.String"</param>
            <returns>Data type for SQLite database</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.GetDatabaseType(System.String)">
            <summary>
            Get the database type from a Microsoft data type string
            </summary>
            <param name="MicrosoftDataType">Microsoft data type string</param>
            <returns>DbType</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.IsSQLiteKeyword(System.String)">
            <summary>
            Checks to see if the Word is currently a SQLite keyword
            </summary>
            <param name="Word">Word to test</param>
            <returns>True, if the word is a SQLite Keyword</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.SqliteCreateTableStatement(System.Data.DataTable)">
            <summary>
            Generates the SQLite statement to create a table within the database.
            </summary>
            <param name="Table">Table to insert into the database</param>
            <returns>SQL Command for creating the table</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.FormatDataColumnName(System.String)">
            <summary>
            Formats a column name if it is an existing SQLite Keyword by 
            adding quotes around the string
            </summary>
            <param name="ColumnName">ColumnName of a DataTable field</param>
            <returns>Formated column name</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.FillTable(System.Data.SQLite.SQLiteConnection,System.Data.DataTable)">
            <summary>
            Inserts a single DataTable into the SQLite database
            </summary>
            <param name="Conn">Full path to the SQLite database</param>
            <param name="Table">DataTable to insert into the database, TableName is used to name the table in the SQLite database</param>
            <returns>True, if the function completes successfully</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.FillTables(System.Data.SQLite.SQLiteConnection,System.Data.DataSet)">
            <summary>
            Inserts each table within the DataSet into the SQLite database
            </summary>
            <param name="Conn">Full path to the SQLite database</param>
            <param name="MainData">DataSet to enter into the database</param>
            <returns>True, if the function completes successfully</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.CreateDatabase">
            <summary>
            Creates a SQLite database, file is named by the property DatabaseFileName,
            automatically overwrites any existing file
            </summary>
            <returns>True, if the function completes successfully</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.CreateDatabase(System.Boolean)">
            <summary>
            Creates a SQLite database, file is named by the property DatabaseFileName
            </summary>
            <param name="OverwriteExistingDatabase">If true, this function
            will create delete existing SQLite database and create a blank one
            in its place</param>
            <returns>True, if the function completes successfully</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.CreateDatabase(System.String,System.Boolean)">
            <summary>
            Creates a SQLite database
            </summary>
            <param name="FileNameOfDatabase">Path and name of database (e.g. C:\Database\TestDB.db3)</param>
            <param name="OverwriteExistingDatabase">If true, this function
            will create delete existing SQLite database and create a blank one
            in its place</param>
            <returns>True, if the function completes successfully</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.WriteDataTableToDatabase(System.Data.DataTable)">
            <summary>
            Writes a DataTable out to the SQLite database
            </summary>
            <param name="Table">DataTable to write to database</param>
            <returns>True, if the function completes successfully</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.WriteDatasetToDatabase(System.Data.DataSet)">
            <summary>
            Commits the tables within a DataSet to a SQLite database
            </summary>
            <param name="MainData">the DataSet to commit to the SQLite database</param>
            <returns>True, if the data is committed successfully</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.WriteDatasetToDatabase(System.String,System.Data.DataSet)">
            <summary>
            Commits the tables within a DataSet to a SQLite database
            </summary>
            <param name="DatabasePath">Path to the database to commit to</param>
            <param name="MainData">the DataSet to commit to the SQLite database</param>
            <returns>True, if the data is committed successfully</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.TableExists(System.String)">
            <summary>
            Determines if a table is present in the database or not
            </summary>
            <param name="TableName">Name of table</param>
            <returns>True if table is present, otherwise false</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.GetDatabaseInformation">
            <summary>
            Gets the table information regarding the database from sqlite_master, such as table names etc.
            </summary>
            <returns>Datatable of all the information</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.GetListOfTablesInDatabase">
            <summary>
            Gets a list of the table names in the database
            </summary>
            <returns>List of tables names in the SQLite database</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.CreateIndex(System.String,System.String,System.String)">
            <summary>
            Creates an index in the database
            </summary>
            <param name="Table">Table name</param>
            <param name="Column">Name of Column to index within the table</param>
            <param name="IndexName">Name of index, if null/blank, one will be automatically generated</param>
            <returns>True, if index is created successfully</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.SelectTable(System.String,System.String)">
            <summary>
            Selects a table from a given query
            </summary>
            <param name="TableName">Name to give to the output table</param>
            <param name="Command">SQLite query to generate the table that is returned</param>
            <returns>Table generated from the supplied SQLite query, null if query fails</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.DropTable(System.String)">
            <summary>
            If a table exists in the database, this will remove the table
            </summary>
            <param name="TableName">Name of table to delete</param>
            <returns>True, if table is dropped successfully</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.GetTable(System.String)">
            <summary>
            Retrieves a table from the SQLite database and returns it as a DataTable
            </summary>
            <param name="TableName">Name of table to retrieve</param>
            <returns>Table from Database</returns>
        </member>
        <member name="M:PNNLOmics.Databases.SQLiteHandler.RunNonQuery(System.String)">
            <summary>
            Useful method to execute a NonQuery on the Database
            </summary>
            <param name="Command">SQL command to issue</param>
            <returns>True, if the SQL statement completed successfully</returns>
        </member>
        <member name="P:PNNLOmics.Databases.SQLiteHandler.DatabaseFileName">
            <summary>
            Complete path and file name to your SQLite database (e.g. C:\Database\TestDB.db3)
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctions.Quadratic">
            <summary>
            Basis function for the LM Algorithm using Quadratic Peak Shapes
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctions.Quadratic.FunctionDelegate(System.Double[],System.Double[],System.Double@,System.Object)">
            <summary>
            Evalutates the second order chebyshev polynomials
            </summary>
            <param name="c">Set of coefficients</param>
            <param name="x">Input variables</param>
            <param name="functionResult">Returned sum value of your function</param>
            <param name="obj">?</param>
        </member>
        <member name="T:PNNLOmics.Algorithms.FeatureClustering.MSMSClusterer">
            <summary>
            Aligns multiple datasets based on MS/MS clustering methods.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.IProgressNotifer">
            <summary>
            Interface defining signature for a progress notifier object.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.MSMSClusterer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.MSMSClusterer.Cluster(System.Int32,System.Int32,System.Collections.Generic.List{PNNLOmics.Data.Features.MSFeatureLight},PNNLOmics.Data.ISpectraProvider,System.Double)">
            <summary>
            Clusters spectra together based on similarity.
            </summary>
            <param name="start"></param>
            <param name="stop"></param>
            <param name="features"></param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureClustering.MSMSClusterer.Cluster(System.Collections.Generic.List{PNNLOmics.Data.Features.UMCLight},PNNLOmics.Data.ISpectraProvider)">
            <summary>
            Aligns features based on MSMS spectral similarity.
            </summary>
            <param name="featureMap"></param>
            <param name="msms"></param>
        </member>
        <member name="E:PNNLOmics.Algorithms.FeatureClustering.MSMSClusterer.Progress">
            <summary>
            Fired when progress is made.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSMSClusterer.ScanRange">
            <summary>
            Gets or sets the scan range.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSMSClusterer.SimilarityTolerance">
            <summary>
            Gets or sets the similarity tolerance to use.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSMSClusterer.SpectralComparer">
            <summary>
            Gets or sets the object used to compare two spectra for alignment matching.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSMSClusterer.MinimumClusterSize">
            <summary>
            Gets or sets the minimum cluster size.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSMSClusterer.MzTolerance">
            <summary>
            Gets or sets the m/z tolerance for precursor matches.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSMSClusterer.MassTolerance">
            <summary>
            Gets or sets the mass tolerance.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureClustering.MSMSClusterer.AdductMass">
            <summary>
            Gets or sets the adduct mass e.g. Proton H+
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Features.UMCCluster">
            <summary>
            Class that contains information and references to a cluster of UMC's.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Features.UMCCluster.m_umcList">
            <summary>
            List of UMC's that define the cluster.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCCluster.#ctor">
            <summary>
            Default constructor for a cluster.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCCluster.#ctor(PNNLOmics.Data.Features.UMCCluster)">
            <summary>
            Copy constructor. 
            </summary>
            <param name="cluster"></param>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCCluster.#ctor(PNNLOmics.Data.Features.UMC)">
            <summary>
            Creates a UMC Cluster from the umc, while also connecting them together.
            </summary>
            <param name="cluster"></param>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCCluster.Clear">
            <summary>
            Resets the object to it's default values.
            </summary>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCCluster.CalculateStatistics(PNNLOmics.Data.Features.ClusterCentroidRepresentation)">
            <summary>
            Calculates the centroid and other statistics about the cluster.
            </summary>
            <param name="centroid"></param>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCCluster.Equals(System.Object)">
            <summary>
            Compares two objects' values to each other.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if similar, False if not.</returns>
        </member>
        <member name="M:PNNLOmics.Data.Features.UMCCluster.GetHashCode">
            <summary>
            Computes a hash code for the cluster.
            </summary>
            <returns>Hashcode as an integer.</returns>
        </member>
        <member name="P:PNNLOmics.Data.Features.UMCCluster.UMCList">
            <summary>
            Gets or sets the list of UMC's that comprise this cluster.
            </summary>
        </member>
        <member name="T:PNNLOmics.Data.Constants.Constants">
            <summary>
            This class contains the constants libraries
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Constants.Constants.m_aminoAcidLibrary">
            <summary>
            Amino acid library instance.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Constants.Constants.m_crossRingLibrary">
            <summary>
            Cross ring library instance.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Constants.Constants.m_elementLibrary">
            <summary>
            Element library instance.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Constants.Constants.m_miscellaneousMatterLibrary">
            <summary>
            Miscellaneous matter library instance.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Constants.Constants.m_monosaccharideLibrary">
            <summary>
            Monosaccharide library instance.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Constants.Constants.m_subAtomicParticleLibrary">
            <summary>
            Sub atomics particle library instance.
            </summary>
        </member>
        <member name="F:PNNLOmics.Data.Constants.Constants.m_userUnitLibrary">
            <summary>
            user library instance.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Constants.AminoAcids">
            <summary>
            Gets the amino acid library.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Constants.CrossRings">
            <summary>
            Gets the monosaccharide cross ring cleavage library.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Constants.Elements">
            <summary>
            Gets the amino acid library.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Constants.MiscellaneousMatter">
            <summary>
            Gets the miscellaneous matter library.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Constants.Monosaccharides">
            <summary>
            Gets the monosaccharide library.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Constants.SubAtomicParticles">
            <summary>
            Gets the sub atomic particle library.
            </summary>
        </member>
        <member name="P:PNNLOmics.Data.Constants.Constants.UserUnits">
            <summary>
            Gets and sets the user unit library.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Solvers.LevenburgMarquadt.BasisFunctions.Hanning.FunctionDelegate(System.Double[],System.Double[],System.Double@,System.Object)">
            <summary>
            Evalutates the second order chebyshev polynomials
            </summary>
            <param name="c">Set of coefficients</param>
            <param name="x">Input variables</param>
            <param name="functionResult">Returned sum value of your function</param>
            <param name="obj">?</param>
        </member>
        <member name="T:PNNLOmics.Algorithms.Alignment.AlignmentScore`2">
            <summary>
            Encapsulates the alignment scoring algorithm for generating an alignment
            matrix between an alignee and reference dataset
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.AlignmentScore`2.#ctor(PNNLOmics.Algorithms.Alignment.AlignmentDataset{`0},PNNLOmics.Algorithms.Alignment.AlignmentDataset{`1},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of AlignmentScore
            </summary>
            <param name="aligneeDataset"></param>
            <param name="referenceDataset"></param>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.AlignmentScore`2.CalculateAlignmentScore(PNNLOmics.Algorithms.Alignment.SimilarityScore{`0,`1})">
            <summary>
            Calculates the alignment matrix between the alignee and reference dataset
            </summary>
            <param name="similarityScore">The similarity score that was calculated
            between the two datasets as this AlignmentScore</param>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentScore`2.StandardDeviationNET">
            <summary>
            Gets or sets the standard deviation for the NET
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentScore`2.ToleranceNET">
            <summary>
            Gets or sets the NET tolerance used when calculating section matches
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentScore`2.StandardDeviationMass">
            <summary>
            Gets or sets the standard deviation for the mass
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentScore`2.ToleranceMass">
            <summary>
            Gets or sets the mass tolerance used when calculating section matches
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.Alignment.AlignmentScore`2.AlignmentMatches">
            <summary>
            Gets the list of alignment matches generated during the scoring algorithm
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters.#ctor">
            <summary>
            Default constructor for FeatureMatcherParameters.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters.SetTolerances(System.Double,System.Double,System.Single)">
            <summary>
            Sets tolerances using values.
            </summary>
            <param name="massTolerance">Mass tolerance in PPM.</param>
            <param name="netTolerance">NET tolerance.</param>
            <param name="driftTimeTolerance">Drift time tolerance.</param>
        </member>
        <member name="M:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters.Clear">
            <summary>
            Resets all parameters to default values.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters.UserTolerances">
            <summary>
            Gets or sets the user defined tolerances for initial matching.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters.UseEllipsoid">
            <summary>
            Gets or sets whether or not an ellipsoidal region is used for shift matches.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters.ShouldCalculateShiftFDR">
            <summary>
            Gets or sets whether to calculate FDR using a fixed shift.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters.ShouldCalculateSTAC">
            <summary>
            Gets or sets whether to calculate STAC scores and FDR.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters.ShouldCalculateHistogramFDR">
            <summary>
            Gets or sets whether to create a mass error histogram to compute FDR.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters.ShouldCalculateSLiC">
            <summary>
            Gets or sets whether to calculate SLiC scores for each match.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters.UseDriftTime">
            <summary>
            Gets or sets whether to use the drift times in calculations.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters.UsePriors">
            <summary>
            Gets or sets whether to use prior probabilities in the calculation of STAC scores.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters.ChargeStateList">
            <summary>
            Gets or sets the list of charge states to perform algorithms over in the case of IMS data.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters.ShiftAmount">
            <summary>
            Gets or sets the amount of fixed shift to use for calculating shifted FDR.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters.HistogramBinWidth">
            <summary>
            Gets or sets the histogram bin width for mass error histogram FDR calculation.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.FeatureMatcher.Data.FeatureMatcherParameters.HistogramMultiplier">
            <summary>
            Gets or sets the multiplier to use when calculating FDR via the mass error histogram.
            </summary>
        </member>
        <member name="M:PNNLOmics.Extensions.MsSpectraExtensions.Group(System.Collections.Generic.IEnumerable{PNNLOmics.Data.MSSpectra})">
            <summary>
            Creates a dictionary that for a given list of MS/MS spectra, maps based on their datasets (groupid)
            </summary>
            <param name="spectra"></param>
            <returns></returns>
        </member>
        <member name="T:PNNLOmics.Algorithms.SpectralComparisons.SpectralMzComparer">
            <summary>
            Compares two spectra based on their 
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.SpectralComparisons.SpectralMzComparer.CompareSpectra(PNNLOmics.Data.MSSpectra,PNNLOmics.Data.MSSpectra)">
            <summary>
            Compares two spectra finding similar peaks in two masses.
            </summary>
            <param name="spectraX"></param>
            <param name="spectraY"></param>
            <returns></returns>
        </member>
        <member name="P:PNNLOmics.Algorithms.SpectralComparisons.SpectralMzComparer.MassTolerance">
            <summary>
            Gets or sets the mass tolerance in m/z
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.PeakDetection.PeakCentroider">
            <summary>
            Converts raw XYdata into differential peaks with an a X-centroid and an apex Y-abundance 
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.PeakDetection.PeakCentroider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.PeakDetection.PeakCentroider.DiscoverPeaks(System.Collections.Generic.List{PNNLOmics.Data.XYData})">
            <summary>
            Find candidate peaks in the spectra (incressing and then decreasing).  For each peak top, find centroid
            </summary>
            <param name="RawXYData">List of PNNL Omics XYData</param>
            <param name="parameters">parameters needed for the fit</param>
        </member>
        <member name="M:PNNLOmics.Algorithms.PeakDetection.PeakCentroider.Parabola(System.Collections.Generic.List{PNNLOmics.Data.XYData})">
            <summary>
            find the centoid mass and apex intenxity via paraola fit to the top three points
            </summary>
            <param name="peakTopList">A list of PNNL Omics XYData</param>
            <returns>XYData point correspiding to the pair at the apex intensity and center of mass </returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.PeakDetection.PeakCentroider.ParabolaABC(System.Collections.Generic.List{PNNLOmics.Data.XYData},System.Double@,System.Double@,System.Double@)">
            <summary>
            Find the coefficeints to the parabola that goes through the data points
            </summary>
            <param name="peakTopList">A list of PNNL Omics XYData</param>
            <returns>XYData point correspiding to the pair at the apex intensity and center of mass </returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.PeakDetection.PeakCentroider.FindShoulderNoise(System.Collections.Generic.List{PNNLOmics.Data.XYData}@,System.Int32,System.Double,System.Int32@,System.Int32@)">
            <summary>
            Find the local minima on each side of the peak
            </summary>
            <param name="rawData">reference to fullspectra</param>
            <param name="centerIndex">index of center point at local maximum</param>
            <param name="defaultNoiseValue">when the data drops to 0 on either side of peak, use this value.  default =1</param>
            <returns>returns the Y value of the lowest shoulder</returns>
        </member>
        <member name="M:PNNLOmics.Algorithms.PeakDetection.PeakCentroider.FindFWHM(System.Collections.Generic.List{PNNLOmics.Data.XYData},System.Int32,PNNLOmics.Data.XYData,System.Int32@,System.Int32@,PNNLOmics.Algorithms.PeakDetection.PeakFitType)">
            <summary>
            Find full width at half maximum value at position specified. 
            remarks Looks for half height locations at left and right side, and uses twice of that value as the FWHM value. If half height 
            locations cannot be found (because of say an overlapping neighbouring peak), we perform interpolations.
            </summary>
            <param name="rawData">data to search in</param>
            <param name="centerIndex">location of center points.  Apex of centroided peaks</param>
            <param name="centroidPeak">specific peak to find the FWHM of</param>
            <param name="shoulderNoiseToLettIndex">return location of local minimum to the left</param>
            <param name="shoulderNoiseToRightIndex">return location of local minima to the right</param>
            <param name="lowAbundanceFWHMFitType">which algorithm will we use to calculate hald max value on the side of the peak</param>
            <returns></returns>
        </member>
        <member name="P:PNNLOmics.Algorithms.PeakDetection.PeakCentroider.Parameters">
            <summary>
            Gets or sets the peak centroider parameters.
            </summary>
        </member>
        <member name="T:PNNLOmics.Algorithms.ProgressNotifierArgs">
            <summary>
            Argument object for a progress notifier.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.ProgressNotifierArgs.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:PNNLOmics.Algorithms.ProgressNotifierArgs.PercentComplete">
            <summary>
            Gets or sets the percentage complete.
            </summary>
        </member>
        <member name="P:PNNLOmics.Algorithms.ProgressNotifierArgs.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.DriftTimeAlignment`2.AlignObservedEnumerable(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Double,System.Double)">
            <summary>
            Aligns features to the baseline correcting for drift time.
            </summary>
            <param name="fullObservedEnumerable">All features.</param>
            <param name="observedEnumerable">Filtered features to use for drift time correction.</param>
            <param name="targetEnumerable">Expected features that should be filtered.</param>
            <param name="massTolerance">PPM Mass Tolerance.</param>
            <param name="netTolerance">Normalized Elution Time Tolerance.</param>
        </member>
        <member name="M:PNNLOmics.Algorithms.Alignment.DriftTimeAlignment`2.CorrectForOffset(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Double,System.Double,System.Double)">
            <summary>
            Does a zero mean drift time correction.
            </summary>
            <param name="observedEnumerable">All observed features to shift that should already be drift time aligned.</param>
            <param name="targetEnumerable">Expected features</param>
            <param name="massTolerance">PPM Mass Tolerance</param>
            <param name="netTolerance">Normalized Elution Time tolerance.</param>
            <param name="driftTimeTolerance">Drift time tolerance to use.</param>
        </member>
    </members>
</doc>
